{"remainingRequest":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/babel-loader/lib/index.js!/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/echarts/lib/util/number.js","dependencies":[{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/echarts/lib/util/number.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:cmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIik7CgovKgoqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmUKKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGUKKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbgoqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGUKKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlCiogIkxpY2Vuc2UiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZQoqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4KKiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zCiogdW5kZXIgdGhlIExpY2Vuc2UuCiovCnZhciB6clV0aWwgPSByZXF1aXJlKCJ6cmVuZGVyL2xpYi9jb3JlL3V0aWwiKTsKLyoKKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lCiogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlCiogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24KKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlCiogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZQoqICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2UKKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAoqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiogIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZCiogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwoqIHVuZGVyIHRoZSBMaWNlbnNlLgoqLwoKLyoKKiBBIHRoaXJkLXBhcnR5IGxpY2Vuc2UgaXMgZW1iZWRlZCBmb3Igc29tZSBvZiB0aGUgY29kZSBpbiB0aGlzIGZpbGU6CiogVGhlIG1ldGhvZCAicXVhbnRpbGUiIHdhcyBjb3BpZWQgZnJvbSAiZDMuanMiLgoqIChTZWUgbW9yZSBkZXRhaWxzIGluIHRoZSBjb21tZW50IG9mIHRoZSBtZXRob2QgYmVsb3cuKQoqIFRoZSB1c2Ugb2YgdGhlIHNvdXJjZSBjb2RlIG9mIHRoaXMgZmlsZSBpcyBhbHNvIHN1YmplY3QgdG8gdGhlIHRlcm1zCiogYW5kIGNvbnNpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgImQzLmpzIiAoQlNELTNDbGF1c2UsIHNlZQoqIDwvbGljZW5zZXMvTElDRU5TRS1kMz4pLgoqLwoKCnZhciBSQURJQU5fRVBTSUxPTiA9IDFlLTQ7CgpmdW5jdGlvbiBfdHJpbShzdHIpIHsKICByZXR1cm4gc3RyLnJlcGxhY2UoL15ccyt8XHMrJC9nLCAnJyk7Cn0KLyoqCiAqIExpbmVhciBtYXBwaW5nIGEgdmFsdWUgZnJvbSBkb21haW4gdG8gcmFuZ2UKICogQG1lbWJlck9mIG1vZHVsZTplY2hhcnRzL3V0aWwvbnVtYmVyCiAqIEBwYXJhbSAgeyhudW1iZXJ8QXJyYXkuPG51bWJlcj4pfSB2YWwKICogQHBhcmFtICB7QXJyYXkuPG51bWJlcj59IGRvbWFpbiBEb21haW4gZXh0ZW50IGRvbWFpblswXSBjYW4gYmUgYmlnZ2VyIHRoYW4gZG9tYWluWzFdCiAqIEBwYXJhbSAge0FycmF5LjxudW1iZXI+fSByYW5nZSAgUmFuZ2UgZXh0ZW50IHJhbmdlWzBdIGNhbiBiZSBiaWdnZXIgdGhhbiByYW5nZVsxXQogKiBAcGFyYW0gIHtib29sZWFufSBjbGFtcAogKiBAcmV0dXJuIHsobnVtYmVyfEFycmF5LjxudW1iZXI+fQogKi8KCgpmdW5jdGlvbiBsaW5lYXJNYXAodmFsLCBkb21haW4sIHJhbmdlLCBjbGFtcCkgewogIHZhciBzdWJEb21haW4gPSBkb21haW5bMV0gLSBkb21haW5bMF07CiAgdmFyIHN1YlJhbmdlID0gcmFuZ2VbMV0gLSByYW5nZVswXTsKCiAgaWYgKHN1YkRvbWFpbiA9PT0gMCkgewogICAgcmV0dXJuIHN1YlJhbmdlID09PSAwID8gcmFuZ2VbMF0gOiAocmFuZ2VbMF0gKyByYW5nZVsxXSkgLyAyOwogIH0gLy8gQXZvaWQgYWNjdXJhY3kgcHJvYmxlbSBpbiBlZGdlLCBzdWNoIGFzCiAgLy8gMTQ2LjM5IC0gNjIuODMgPT09IDgzLjU1OTk5OTk5OTk5OTk5LgogIC8vIFNlZSBlY2hhcnRzL3Rlc3QvdXQvc3BlYy91dGlsL251bWJlci5qcyNsaW5lYXJNYXAjYWNjdXJhY3lFcnJvcgogIC8vIEl0IGlzIGEgbGl0dGxlIHZlcmJvc2UgZm9yIGVmZmljaWVuY3kgY29uc2lkZXJpbmcgdGhpcyBtZXRob2QKICAvLyBpcyBhIGhvdHNwb3QuCgoKICBpZiAoY2xhbXApIHsKICAgIGlmIChzdWJEb21haW4gPiAwKSB7CiAgICAgIGlmICh2YWwgPD0gZG9tYWluWzBdKSB7CiAgICAgICAgcmV0dXJuIHJhbmdlWzBdOwogICAgICB9IGVsc2UgaWYgKHZhbCA+PSBkb21haW5bMV0pIHsKICAgICAgICByZXR1cm4gcmFuZ2VbMV07CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmICh2YWwgPj0gZG9tYWluWzBdKSB7CiAgICAgICAgcmV0dXJuIHJhbmdlWzBdOwogICAgICB9IGVsc2UgaWYgKHZhbCA8PSBkb21haW5bMV0pIHsKICAgICAgICByZXR1cm4gcmFuZ2VbMV07CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgaWYgKHZhbCA9PT0gZG9tYWluWzBdKSB7CiAgICAgIHJldHVybiByYW5nZVswXTsKICAgIH0KCiAgICBpZiAodmFsID09PSBkb21haW5bMV0pIHsKICAgICAgcmV0dXJuIHJhbmdlWzFdOwogICAgfQogIH0KCiAgcmV0dXJuICh2YWwgLSBkb21haW5bMF0pIC8gc3ViRG9tYWluICogc3ViUmFuZ2UgKyByYW5nZVswXTsKfQovKioKICogQ29udmVydCBhIHBlcmNlbnQgc3RyaW5nIHRvIGFic29sdXRlIG51bWJlci4KICogUmV0dXJucyBOYU4gaWYgcGVyY2VudCBpcyBub3QgYSB2YWxpZCBzdHJpbmcgb3IgbnVtYmVyCiAqIEBtZW1iZXJPZiBtb2R1bGU6ZWNoYXJ0cy91dGlsL251bWJlcgogKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHBlcmNlbnQKICogQHBhcmFtIHtudW1iZXJ9IGFsbAogKiBAcmV0dXJuIHtudW1iZXJ9CiAqLwoKCmZ1bmN0aW9uIHBhcnNlUGVyY2VudChwZXJjZW50LCBhbGwpIHsKICBzd2l0Y2ggKHBlcmNlbnQpIHsKICAgIGNhc2UgJ2NlbnRlcic6CiAgICBjYXNlICdtaWRkbGUnOgogICAgICBwZXJjZW50ID0gJzUwJSc7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgJ2xlZnQnOgogICAgY2FzZSAndG9wJzoKICAgICAgcGVyY2VudCA9ICcwJSc7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgJ3JpZ2h0JzoKICAgIGNhc2UgJ2JvdHRvbSc6CiAgICAgIHBlcmNlbnQgPSAnMTAwJSc7CiAgICAgIGJyZWFrOwogIH0KCiAgaWYgKHR5cGVvZiBwZXJjZW50ID09PSAnc3RyaW5nJykgewogICAgaWYgKF90cmltKHBlcmNlbnQpLm1hdGNoKC8lJC8pKSB7CiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHBlcmNlbnQpIC8gMTAwICogYWxsOwogICAgfQoKICAgIHJldHVybiBwYXJzZUZsb2F0KHBlcmNlbnQpOwogIH0KCiAgcmV0dXJuIHBlcmNlbnQgPT0gbnVsbCA/IE5hTiA6ICtwZXJjZW50Owp9Ci8qKgogKiAoMSkgRml4IHJvdW5kaW5nIGVycm9yIG9mIGZsb2F0IG51bWJlcnMuCiAqICgyKSBTdXBwb3J0IHJldHVybiBzdHJpbmcgdG8gYXZvaWQgc2NpZW50aWZpYyBub3RhdGlvbiBsaWtlICczLjVlLTcnLgogKgogKiBAcGFyYW0ge251bWJlcn0geAogKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbl0KICogQHBhcmFtIHtib29sZWFufSBbcmV0dXJuU3RyXQogKiBAcmV0dXJuIHtudW1iZXJ8c3RyaW5nfQogKi8KCgpmdW5jdGlvbiByb3VuZCh4LCBwcmVjaXNpb24sIHJldHVyblN0cikgewogIGlmIChwcmVjaXNpb24gPT0gbnVsbCkgewogICAgcHJlY2lzaW9uID0gMTA7CiAgfSAvLyBBdm9pZCByYW5nZSBlcnJvcgoKCiAgcHJlY2lzaW9uID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgcHJlY2lzaW9uKSwgMjApOwogIHggPSAoK3gpLnRvRml4ZWQocHJlY2lzaW9uKTsKICByZXR1cm4gcmV0dXJuU3RyID8geCA6ICt4Owp9Ci8qKgogKiBhc2Mgc29ydCBhcnIuCiAqIFRoZSBpbnB1dCBhcnIgd2lsbCBiZSBtb2RpZmllZC4KICoKICogQHBhcmFtIHtBcnJheX0gYXJyCiAqIEByZXR1cm4ge0FycmF5fSBUaGUgaW5wdXQgYXJyLgogKi8KCgpmdW5jdGlvbiBhc2MoYXJyKSB7CiAgYXJyLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiBhIC0gYjsKICB9KTsKICByZXR1cm4gYXJyOwp9Ci8qKgogKiBHZXQgcHJlY2lzaW9uCiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwKICovCgoKZnVuY3Rpb24gZ2V0UHJlY2lzaW9uKHZhbCkgewogIHZhbCA9ICt2YWw7CgogIGlmIChpc05hTih2YWwpKSB7CiAgICByZXR1cm4gMDsKICB9IC8vIEl0IGlzIG11Y2ggZmFzdGVyIHRoYW4gbWV0aG9kcyBjb252ZXJ0aW5nIG51bWJlciB0byBzdHJpbmcgYXMgZm9sbG93cwogIC8vICAgICAgdmFyIHRtcCA9IHZhbC50b1N0cmluZygpOwogIC8vICAgICAgcmV0dXJuIHRtcC5sZW5ndGggLSAxIC0gdG1wLmluZGV4T2YoJy4nKTsKICAvLyBlc3BlY2lhbGx5IHdoZW4gcHJlY2lzaW9uIGlzIGxvdwoKCiAgdmFyIGUgPSAxOwogIHZhciBjb3VudCA9IDA7CgogIHdoaWxlIChNYXRoLnJvdW5kKHZhbCAqIGUpIC8gZSAhPT0gdmFsKSB7CiAgICBlICo9IDEwOwogICAgY291bnQrKzsKICB9CgogIHJldHVybiBjb3VudDsKfQovKioKICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB2YWwKICogQHJldHVybiB7bnVtYmVyfQogKi8KCgpmdW5jdGlvbiBnZXRQcmVjaXNpb25TYWZlKHZhbCkgewogIHZhciBzdHIgPSB2YWwudG9TdHJpbmcoKTsgLy8gQ29uc2lkZXIgc2NpZW50aWZpYyBub3RhdGlvbjogJzMuNGUtMTInICczLjRlKzEyJwoKICB2YXIgZUluZGV4ID0gc3RyLmluZGV4T2YoJ2UnKTsKCiAgaWYgKGVJbmRleCA+IDApIHsKICAgIHZhciBwcmVjaXNpb24gPSArc3RyLnNsaWNlKGVJbmRleCArIDEpOwogICAgcmV0dXJuIHByZWNpc2lvbiA8IDAgPyAtcHJlY2lzaW9uIDogMDsKICB9IGVsc2UgewogICAgdmFyIGRvdEluZGV4ID0gc3RyLmluZGV4T2YoJy4nKTsKICAgIHJldHVybiBkb3RJbmRleCA8IDAgPyAwIDogc3RyLmxlbmd0aCAtIDEgLSBkb3RJbmRleDsKICB9Cn0KLyoqCiAqIE1pbmltYWwgZGljZXJuaWJsZSBkYXRhIHByZWNpc2lvaW4gYWNjb3JkaW5nIHRvIGEgc2luZ2xlIHBpeGVsLgogKgogKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBkYXRhRXh0ZW50CiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHBpeGVsRXh0ZW50CiAqIEByZXR1cm4ge251bWJlcn0gcHJlY2lzaW9uCiAqLwoKCmZ1bmN0aW9uIGdldFBpeGVsUHJlY2lzaW9uKGRhdGFFeHRlbnQsIHBpeGVsRXh0ZW50KSB7CiAgdmFyIGxvZyA9IE1hdGgubG9nOwogIHZhciBMTjEwID0gTWF0aC5MTjEwOwogIHZhciBkYXRhUXVhbnRpdHkgPSBNYXRoLmZsb29yKGxvZyhkYXRhRXh0ZW50WzFdIC0gZGF0YUV4dGVudFswXSkgLyBMTjEwKTsKICB2YXIgc2l6ZVF1YW50aXR5ID0gTWF0aC5yb3VuZChsb2coTWF0aC5hYnMocGl4ZWxFeHRlbnRbMV0gLSBwaXhlbEV4dGVudFswXSkpIC8gTE4xMCk7IC8vIHRvRml4ZWQoKSBkaWdpdHMgYXJndW1lbnQgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDIwLgoKICB2YXIgcHJlY2lzaW9uID0gTWF0aC5taW4oTWF0aC5tYXgoLWRhdGFRdWFudGl0eSArIHNpemVRdWFudGl0eSwgMCksIDIwKTsKICByZXR1cm4gIWlzRmluaXRlKHByZWNpc2lvbikgPyAyMCA6IHByZWNpc2lvbjsKfQovKioKICogR2V0IGEgZGF0YSBvZiBnaXZlbiBwcmVjaXNpb24sIGFzc3VyaW5nIHRoZSBzdW0gb2YgcGVyY2VudGFnZXMKICogaW4gdmFsdWVMaXN0IGlzIDEuCiAqIFRoZSBsYXJnZXN0IHJlbWFpbmVyIG1ldGhvZCBpcyB1c2VkLgogKiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXJnZXN0X3JlbWFpbmRlcl9tZXRob2QKICoKICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gdmFsdWVMaXN0IGEgbGlzdCBvZiBhbGwgZGF0YQogKiBAcGFyYW0ge251bWJlcn0gaWR4IGluZGV4IG9mIHRoZSBkYXRhIHRvIGJlIHByb2Nlc3NlZCBpbiB2YWx1ZUxpc3QKICogQHBhcmFtIHtudW1iZXJ9IHByZWNpc2lvbiBpbnRlZ2VyIG51bWJlciBzaG93aW5nIGRpZ2l0cyBvZiBwcmVjaXNpb24KICogQHJldHVybiB7bnVtYmVyfSBwZXJjZW50IHJhbmdpbmcgZnJvbSAwIHRvIDEwMAogKi8KCgpmdW5jdGlvbiBnZXRQZXJjZW50V2l0aFByZWNpc2lvbih2YWx1ZUxpc3QsIGlkeCwgcHJlY2lzaW9uKSB7CiAgaWYgKCF2YWx1ZUxpc3RbaWR4XSkgewogICAgcmV0dXJuIDA7CiAgfQoKICB2YXIgc3VtID0genJVdGlsLnJlZHVjZSh2YWx1ZUxpc3QsIGZ1bmN0aW9uIChhY2MsIHZhbCkgewogICAgcmV0dXJuIGFjYyArIChpc05hTih2YWwpID8gMCA6IHZhbCk7CiAgfSwgMCk7CgogIGlmIChzdW0gPT09IDApIHsKICAgIHJldHVybiAwOwogIH0KCiAgdmFyIGRpZ2l0cyA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pOwogIHZhciB2b3Rlc1BlclF1b3RhID0genJVdGlsLm1hcCh2YWx1ZUxpc3QsIGZ1bmN0aW9uICh2YWwpIHsKICAgIHJldHVybiAoaXNOYU4odmFsKSA/IDAgOiB2YWwpIC8gc3VtICogZGlnaXRzICogMTAwOwogIH0pOwogIHZhciB0YXJnZXRTZWF0cyA9IGRpZ2l0cyAqIDEwMDsKICB2YXIgc2VhdHMgPSB6clV0aWwubWFwKHZvdGVzUGVyUXVvdGEsIGZ1bmN0aW9uICh2b3RlcykgewogICAgLy8gQXNzaWduIGF1dG9tYXRpYyBzZWF0cy4KICAgIHJldHVybiBNYXRoLmZsb29yKHZvdGVzKTsKICB9KTsKICB2YXIgY3VycmVudFN1bSA9IHpyVXRpbC5yZWR1Y2Uoc2VhdHMsIGZ1bmN0aW9uIChhY2MsIHZhbCkgewogICAgcmV0dXJuIGFjYyArIHZhbDsKICB9LCAwKTsKICB2YXIgcmVtYWluZGVyID0genJVdGlsLm1hcCh2b3Rlc1BlclF1b3RhLCBmdW5jdGlvbiAodm90ZXMsIGlkeCkgewogICAgcmV0dXJuIHZvdGVzIC0gc2VhdHNbaWR4XTsKICB9KTsgLy8gSGFzIHJlbWFpbmRpbmcgdm90ZXMuCgogIHdoaWxlIChjdXJyZW50U3VtIDwgdGFyZ2V0U2VhdHMpIHsKICAgIC8vIEZpbmQgbmV4dCBsYXJnZXN0IHJlbWFpbmRlci4KICAgIHZhciBtYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CiAgICB2YXIgbWF4SWQgPSBudWxsOwoKICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZW1haW5kZXIubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgaWYgKHJlbWFpbmRlcltpXSA+IG1heCkgewogICAgICAgIG1heCA9IHJlbWFpbmRlcltpXTsKICAgICAgICBtYXhJZCA9IGk7CiAgICAgIH0KICAgIH0gLy8gQWRkIGEgdm90ZSB0byBtYXggcmVtYWluZGVyLgoKCiAgICArK3NlYXRzW21heElkXTsKICAgIHJlbWFpbmRlclttYXhJZF0gPSAwOwogICAgKytjdXJyZW50U3VtOwogIH0KCiAgcmV0dXJuIHNlYXRzW2lkeF0gLyBkaWdpdHM7Cn0gLy8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIGllIGRvIG5vdCBzdXBwb3J0LgoKCnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTsKLyoqCiAqIFRvIDAgLSAyICogUEksIGNvbnNpZGVyaW5nIG5lZ2F0aXZlIHJhZGlhbi4KICogQHBhcmFtIHtudW1iZXJ9IHJhZGlhbgogKiBAcmV0dXJuIHtudW1iZXJ9CiAqLwoKZnVuY3Rpb24gcmVtUmFkaWFuKHJhZGlhbikgewogIHZhciBwaTIgPSBNYXRoLlBJICogMjsKICByZXR1cm4gKHJhZGlhbiAlIHBpMiArIHBpMikgJSBwaTI7Cn0KLyoqCiAqIEBwYXJhbSB7dHlwZX0gcmFkaWFuCiAqIEByZXR1cm4ge2Jvb2xlYW59CiAqLwoKCmZ1bmN0aW9uIGlzUmFkaWFuQXJvdW5kWmVybyh2YWwpIHsKICByZXR1cm4gdmFsID4gLVJBRElBTl9FUFNJTE9OICYmIHZhbCA8IFJBRElBTl9FUFNJTE9OOwp9Ci8qIGVzbGludC1kaXNhYmxlICovCgoKdmFyIFRJTUVfUkVHID0gL14oPzooXGR7NH0pKD86Wy1cL10oXGR7MSwyfSkoPzpbLVwvXShcZHsxLDJ9KSg/OltUIF0oXGR7MSwyfSkoPzo6KFxkXGQpKD86OihcZFxkKSg/OlsuLF0oXGQrKSk/KT8pPyhafFtcK1wtXVxkXGQ6P1xkXGQpPyk/KT8pPyk/JC87IC8vIGpzaGludCBpZ25vcmU6bGluZQoKLyogZXNsaW50LWVuYWJsZSAqLwoKLyoqCiAqIEBwYXJhbSB7c3RyaW5nfERhdGV8bnVtYmVyfSB2YWx1ZSBUaGVzZSB2YWx1ZXMgY2FuIGJlIGFjY2VwdGVkOgogKiAgICsgQW4gaW5zdGFuY2Ugb2YgRGF0ZSwgcmVwcmVzZW50IGEgdGltZSBpbiBpdHMgb3duIHRpbWUgem9uZS4KICogICArIE9yIHN0cmluZyBpbiBhIHN1YnNldCBvZiBJU08gODYwMSwgb25seSBpbmNsdWRpbmc6CiAqICAgICArIG9ubHkgeWVhciwgbW9udGgsIGRhdGU6ICcyMDEyLTAzJywgJzIwMTItMDMtMDEnLCAnMjAxMi0wMy0wMSAwNScsICcyMDEyLTAzLTAxIDA1OjA2JywKICogICAgICsgc2VwYXJhdGVkIHdpdGggVCBvciBzcGFjZTogJzIwMTItMDMtMDFUMTI6MjI6MzMuMTIzJywgJzIwMTItMDMtMDEgMTI6MjI6MzMuMTIzJywKICogICAgICsgdGltZSB6b25lOiAnMjAxMi0wMy0wMVQxMjoyMjozM1onLCAnMjAxMi0wMy0wMVQxMjoyMjozMys4MDAwJywgJzIwMTItMDMtMDFUMTI6MjI6MzMtMDU6MDAnLAogKiAgICAgYWxsIG9mIHdoaWNoIHdpbGwgYmUgdHJlYXRlZCBhcyBsb2NhbCB0aW1lIGlmIHRpbWUgem9uZSBpcyBub3Qgc3BlY2lmaWVkCiAqICAgICAoc2VlIDxodHRwczovL21vbWVudGpzLmNvbS8+KS4KICogICArIE9yIG90aGVyIHN0cmluZyBmb3JtYXQsIGluY2x1ZGluZyAoYWxsIG9mIHdoaWNoIHdpbGwgYmUgdHJlYXRlZCBhcyBsb2FjYWwgdGltZSk6CiAqICAgICAnMjAxMicsICcyMDEyLTMtMScsICcyMDEyLzMvMScsICcyMDEyLzAzLzAxJywKICogICAgICcyMDA5LzYvMTIgMjowMCcsICcyMDA5LzYvMTIgMjowNTowOCcsICcyMDA5LzYvMTIgMjowNTowOC4xMjMnCiAqICAgKyBhIHRpbWVzdGFtcCwgd2hpY2ggcmVwcmVzZW50IGEgdGltZSBpbiBVVEMuCiAqIEByZXR1cm4ge0RhdGV9IGRhdGUKICovCgpmdW5jdGlvbiBwYXJzZURhdGUodmFsdWUpIHsKICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7CiAgICAvLyBEaWZmZXJlbnQgYnJvd3NlcnMgcGFyc2UgZGF0ZSBpbiBkaWZmZXJlbnQgd2F5LCBzbyB3ZSBwYXJzZSBpdCBtYW51YWxseS4KICAgIC8vIFNvbWUgb3RoZXIgaXNzdWVzOgogICAgLy8gbmV3IERhdGUoJzE5NzAtMDEtMDEnKSBpcyBVVEMsCiAgICAvLyBuZXcgRGF0ZSgnMTk3MC8wMS8wMScpIGFuZCBuZXcgRGF0ZSgnMTk3MC0xLTAxJykgaXMgbG9jYWwuCiAgICAvLyBTZWUgaXNzdWUgIzM2MjMKICAgIHZhciBtYXRjaCA9IFRJTUVfUkVHLmV4ZWModmFsdWUpOwoKICAgIGlmICghbWF0Y2gpIHsKICAgICAgLy8gcmV0dXJuIEludmFsaWQgRGF0ZS4KICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7CiAgICB9IC8vIFVzZSBsb2NhbCB0aW1lIHdoZW4gbm8gdGltZXpvbmUgb2Zmc2V0IHNwZWNpZmVkLgoKCiAgICBpZiAoIW1hdGNoWzhdKSB7CiAgICAgIC8vIG1hdGNoW25dIGNhbiBvbmx5IGJlIHN0cmluZyBvciB1bmRlZmluZWQuCiAgICAgIC8vIEJ1dCB0YWtlIGNhcmUgb2YgJzEyJyArIDEgPT4gJzEyMScuCiAgICAgIHJldHVybiBuZXcgRGF0ZSgrbWF0Y2hbMV0sICsobWF0Y2hbMl0gfHwgMSkgLSAxLCArbWF0Y2hbM10gfHwgMSwgK21hdGNoWzRdIHx8IDAsICsobWF0Y2hbNV0gfHwgMCksICttYXRjaFs2XSB8fCAwLCArbWF0Y2hbN10gfHwgMCk7CiAgICB9IC8vIFRpbWV6b25lb2Zmc2V0IG9mIEphdmFzY3JpcHQgRGF0ZSBoYXMgY29uc2lkZXJlZCBEU1QgKERheWxpZ2h0IFNhdmluZyBUaW1lLAogICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZGF5bGlnaHQtc2F2aW5nLXRpbWUtYWRqdXN0bWVudCkuCiAgICAvLyBGb3IgZXhhbXBsZSwgc3lzdGVtIHRpbWV6b25lIGlzIHNldCBhcyAiVGltZSBab25lOiBBbWVyaWNhL1Rvcm9udG8iLAogICAgLy8gdGhlbiB0aGVzZSBjb2RlIHdpbGwgZ2V0IGRpZmZlcmVudCByZXN1bHQ6CiAgICAvLyBgbmV3IERhdGUoMTQ3ODQxMTk5OTk5OSkuZ2V0VGltZXpvbmVPZmZzZXQoKTsgIC8vIGdldCAyNDBgCiAgICAvLyBgbmV3IERhdGUoMTQ3ODQxMjAwMDAwMCkuZ2V0VGltZXpvbmVPZmZzZXQoKTsgIC8vIGdldCAzMDBgCiAgICAvLyBTbyB3ZSBzaG91bGQgbm90IHVzZSBgbmV3IERhdGVgLCBidXQgdXNlIGBEYXRlLlVUQ2AuCiAgICBlbHNlIHsKICAgICAgICB2YXIgaG91ciA9ICttYXRjaFs0XSB8fCAwOwoKICAgICAgICBpZiAobWF0Y2hbOF0udG9VcHBlckNhc2UoKSAhPT0gJ1onKSB7CiAgICAgICAgICBob3VyIC09IG1hdGNoWzhdLnNsaWNlKDAsIDMpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKCttYXRjaFsxXSwgKyhtYXRjaFsyXSB8fCAxKSAtIDEsICttYXRjaFszXSB8fCAxLCBob3VyLCArKG1hdGNoWzVdIHx8IDApLCArbWF0Y2hbNl0gfHwgMCwgK21hdGNoWzddIHx8IDApKTsKICAgICAgfQogIH0gZWxzZSBpZiAodmFsdWUgPT0gbnVsbCkgewogICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7CiAgfQoKICByZXR1cm4gbmV3IERhdGUoTWF0aC5yb3VuZCh2YWx1ZSkpOwp9Ci8qKgogKiBRdWFudGl0eSBvZiBhIG51bWJlci4gZS5nLiAwLjEsIDEsIDEwLCAxMDAKICoKICogQHBhcmFtICB7bnVtYmVyfSB2YWwKICogQHJldHVybiB7bnVtYmVyfQogKi8KCgpmdW5jdGlvbiBxdWFudGl0eSh2YWwpIHsKICByZXR1cm4gTWF0aC5wb3coMTAsIHF1YW50aXR5RXhwb25lbnQodmFsKSk7Cn0KLyoqCiAqIEV4cG9uZW50IG9mIHRoZSBxdWFudGl0eSBvZiBhIG51bWJlcgogKiBlLmcuLCAxMjM0IGVxdWFscyB0byAxLjIzNCoxMF4zLCBzbyBxdWFudGl0eUV4cG9uZW50KDEyMzQpIGlzIDMKICoKICogQHBhcmFtICB7bnVtYmVyfSB2YWwgbm9uLW5lZ2F0aXZlIHZhbHVlCiAqIEByZXR1cm4ge251bWJlcn0KICovCgoKZnVuY3Rpb24gcXVhbnRpdHlFeHBvbmVudCh2YWwpIHsKICBpZiAodmFsID09PSAwKSB7CiAgICByZXR1cm4gMDsKICB9CgogIHZhciBleHAgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbCkgLyBNYXRoLkxOMTApOwogIC8qKgogICAqIGV4cCBpcyBleHBlY3RlZCB0byBiZSB0aGUgcm91bmRlZC1kb3duIHJlc3VsdCBvZiB0aGUgYmFzZS0xMCBsb2cgb2YgdmFsLgogICAqIEJ1dCBkdWUgdG8gdGhlIHByZWNpc2lvbiBsb3NzIHdpdGggTWF0aC5sb2codmFsKSwgd2UgbmVlZCB0byByZXN0b3JlIGl0CiAgICogdXNpbmcgMTBeZXhwIHRvIG1ha2Ugc3VyZSB3ZSBjYW4gZ2V0IHZhbCBiYWNrIGZyb20gZXhwLiAjMTEyNDkKICAgKi8KCiAgaWYgKHZhbCAvIE1hdGgucG93KDEwLCBleHApID49IDEwKSB7CiAgICBleHArKzsKICB9CgogIHJldHVybiBleHA7Cn0KLyoqCiAqIGZpbmQgYSDigJxuaWNl4oCdIG51bWJlciBhcHByb3hpbWF0ZWx5IGVxdWFsIHRvIHguIFJvdW5kIHRoZSBudW1iZXIgaWYgcm91bmQgPSB0cnVlLAogKiB0YWtlIGNlaWxpbmcgaWYgcm91bmQgPSBmYWxzZS4gVGhlIHByaW1hcnkgb2JzZXJ2YXRpb24gaXMgdGhhdCB0aGUg4oCcbmljZXN04oCdCiAqIG51bWJlcnMgaW4gZGVjaW1hbCBhcmUgMSwgMiwgYW5kIDUsIGFuZCBhbGwgcG93ZXItb2YtdGVuIG11bHRpcGxlcyBvZiB0aGVzZSBudW1iZXJzLgogKgogKiBTZWUgIk5pY2UgTnVtYmVycyBmb3IgR3JhcGggTGFiZWxzIiBvZiBHcmFwaGljIEdlbXMuCiAqCiAqIEBwYXJhbSAge251bWJlcn0gdmFsIE5vbi1uZWdhdGl2ZSB2YWx1ZS4KICogQHBhcmFtICB7Ym9vbGVhbn0gcm91bmQKICogQHJldHVybiB7bnVtYmVyfQogKi8KCgpmdW5jdGlvbiBuaWNlKHZhbCwgcm91bmQpIHsKICB2YXIgZXhwb25lbnQgPSBxdWFudGl0eUV4cG9uZW50KHZhbCk7CiAgdmFyIGV4cDEwID0gTWF0aC5wb3coMTAsIGV4cG9uZW50KTsKICB2YXIgZiA9IHZhbCAvIGV4cDEwOyAvLyAxIDw9IGYgPCAxMAoKICB2YXIgbmY7CgogIGlmIChyb3VuZCkgewogICAgaWYgKGYgPCAxLjUpIHsKICAgICAgbmYgPSAxOwogICAgfSBlbHNlIGlmIChmIDwgMi41KSB7CiAgICAgIG5mID0gMjsKICAgIH0gZWxzZSBpZiAoZiA8IDQpIHsKICAgICAgbmYgPSAzOwogICAgfSBlbHNlIGlmIChmIDwgNykgewogICAgICBuZiA9IDU7CiAgICB9IGVsc2UgewogICAgICBuZiA9IDEwOwogICAgfQogIH0gZWxzZSB7CiAgICBpZiAoZiA8IDEpIHsKICAgICAgbmYgPSAxOwogICAgfSBlbHNlIGlmIChmIDwgMikgewogICAgICBuZiA9IDI7CiAgICB9IGVsc2UgaWYgKGYgPCAzKSB7CiAgICAgIG5mID0gMzsKICAgIH0gZWxzZSBpZiAoZiA8IDUpIHsKICAgICAgbmYgPSA1OwogICAgfSBlbHNlIHsKICAgICAgbmYgPSAxMDsKICAgIH0KICB9CgogIHZhbCA9IG5mICogZXhwMTA7IC8vIEZpeCAzICogMC4xID09PSAwLjMwMDAwMDAwMDAwMDAwMDA0IGlzc3VlIChzZWUgSUVFRSA3NTQpLgogIC8vIDIwIGlzIHRoZSB1cHBwZXIgYm91bmQgb2YgdG9GaXhlZC4KCiAgcmV0dXJuIGV4cG9uZW50ID49IC0yMCA/ICt2YWwudG9GaXhlZChleHBvbmVudCA8IDAgPyAtZXhwb25lbnQgOiAwKSA6IHZhbDsKfQovKioKICogVGhpcyBjb2RlIHdhcyBjb3BpZWQgZnJvbSAiZDMuanMiCiAqIDxodHRwczovL2dpdGh1Yi5jb20vZDMvZDMvYmxvYi85Y2M5YTg3NWU2MzZhMWRjZjM2Y2MxZTA3YmRmNzdlMWFkNmUyYzc0L3NyYy9hcnJheXMvcXVhbnRpbGUuanM+LgogKiBTZWUgdGhlIGxpY2Vuc2Ugc3RhdGVtZW50IGF0IHRoZSBoZWFkIG9mIHRoaXMgZmlsZS4KICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gYXNjQXJyCiAqLwoKCmZ1bmN0aW9uIHF1YW50aWxlKGFzY0FyciwgcCkgewogIHZhciBIID0gKGFzY0Fyci5sZW5ndGggLSAxKSAqIHAgKyAxOwogIHZhciBoID0gTWF0aC5mbG9vcihIKTsKICB2YXIgdiA9ICthc2NBcnJbaCAtIDFdOwogIHZhciBlID0gSCAtIGg7CiAgcmV0dXJuIGUgPyB2ICsgZSAqIChhc2NBcnJbaF0gLSB2KSA6IHY7Cn0KLyoqCiAqIE9yZGVyIGludGVydmFscyBhc2MsIGFuZCBzcGxpdCB0aGVtIHdoZW4gb3ZlcmxhcC4KICogZXhwZWN0KG51bWJlclV0aWwucmVmb3JtSW50ZXJ2YWxzKFsKICogICAgIHtpbnRlcnZhbDogWzE4LCA2Ml0sIGNsb3NlOiBbMSwgMV19LAogKiAgICAge2ludGVydmFsOiBbLUluZmluaXR5LCAtNzBdLCBjbG9zZTogWzAsIDBdfSwKICogICAgIHtpbnRlcnZhbDogWy03MCwgLTI2XSwgY2xvc2U6IFsxLCAxXX0sCiAqICAgICB7aW50ZXJ2YWw6IFstMjYsIDE4XSwgY2xvc2U6IFsxLCAxXX0sCiAqICAgICB7aW50ZXJ2YWw6IFs2MiwgMTUwXSwgY2xvc2U6IFsxLCAxXX0sCiAqICAgICB7aW50ZXJ2YWw6IFsxMDYsIDE1MF0sIGNsb3NlOiBbMSwgMV19LAogKiAgICAge2ludGVydmFsOiBbMTUwLCBJbmZpbml0eV0sIGNsb3NlOiBbMCwgMF19CiAqIF0pKS50b0VxdWFsKFsKICogICAgIHtpbnRlcnZhbDogWy1JbmZpbml0eSwgLTcwXSwgY2xvc2U6IFswLCAwXX0sCiAqICAgICB7aW50ZXJ2YWw6IFstNzAsIC0yNl0sIGNsb3NlOiBbMSwgMV19LAogKiAgICAge2ludGVydmFsOiBbLTI2LCAxOF0sIGNsb3NlOiBbMCwgMV19LAogKiAgICAge2ludGVydmFsOiBbMTgsIDYyXSwgY2xvc2U6IFswLCAxXX0sCiAqICAgICB7aW50ZXJ2YWw6IFs2MiwgMTUwXSwgY2xvc2U6IFswLCAxXX0sCiAqICAgICB7aW50ZXJ2YWw6IFsxNTAsIEluZmluaXR5XSwgY2xvc2U6IFswLCAwXX0KICogXSk7CiAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IGxpc3QsIHdoZXJlIGBjbG9zZWAgbWVhbiBvcGVuIG9yIGNsb3NlCiAqICAgICAgICBvZiB0aGUgaW50ZXJ2YWwsIGFuZCBJbmZpbml0eSBjYW4gYmUgdXNlZC4KICogQHJldHVybiB7QXJyYXkuPE9iamVjdD59IFRoZSBvcmlnaW4gbGlzdCwgd2hpY2ggaGFzIGJlZW4gcmVmb3JtZWQuCiAqLwoKCmZ1bmN0aW9uIHJlZm9ybUludGVydmFscyhsaXN0KSB7CiAgbGlzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICByZXR1cm4gbGl0dGxlVGhhbihhLCBiLCAwKSA/IC0xIDogMTsKICB9KTsKICB2YXIgY3VyciA9IC1JbmZpbml0eTsKICB2YXIgY3VyckNsb3NlID0gMTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDspIHsKICAgIHZhciBpbnRlcnZhbCA9IGxpc3RbaV0uaW50ZXJ2YWw7CiAgICB2YXIgY2xvc2UgPSBsaXN0W2ldLmNsb3NlOwoKICAgIGZvciAodmFyIGxnID0gMDsgbGcgPCAyOyBsZysrKSB7CiAgICAgIGlmIChpbnRlcnZhbFtsZ10gPD0gY3VycikgewogICAgICAgIGludGVydmFsW2xnXSA9IGN1cnI7CiAgICAgICAgY2xvc2VbbGddID0gIWxnID8gMSAtIGN1cnJDbG9zZSA6IDE7CiAgICAgIH0KCiAgICAgIGN1cnIgPSBpbnRlcnZhbFtsZ107CiAgICAgIGN1cnJDbG9zZSA9IGNsb3NlW2xnXTsKICAgIH0KCiAgICBpZiAoaW50ZXJ2YWxbMF0gPT09IGludGVydmFsWzFdICYmIGNsb3NlWzBdICogY2xvc2VbMV0gIT09IDEpIHsKICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7CiAgICB9IGVsc2UgewogICAgICBpKys7CiAgICB9CiAgfQoKICByZXR1cm4gbGlzdDsKCiAgZnVuY3Rpb24gbGl0dGxlVGhhbihhLCBiLCBsZykgewogICAgcmV0dXJuIGEuaW50ZXJ2YWxbbGddIDwgYi5pbnRlcnZhbFtsZ10gfHwgYS5pbnRlcnZhbFtsZ10gPT09IGIuaW50ZXJ2YWxbbGddICYmIChhLmNsb3NlW2xnXSAtIGIuY2xvc2VbbGddID09PSAoIWxnID8gMSA6IC0xKSB8fCAhbGcgJiYgbGl0dGxlVGhhbihhLCBiLCAxKSk7CiAgfQp9Ci8qKgogKiBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfCIiKQogKiAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzICgiMHguLi4iKQogKiBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU4KICoKICogQHBhcmFtIHsqfSB2CiAqIEByZXR1cm4ge2Jvb2xlYW59CiAqLwoKCmZ1bmN0aW9uIGlzTnVtZXJpYyh2KSB7CiAgcmV0dXJuIHYgLSBwYXJzZUZsb2F0KHYpID49IDA7Cn0KCmV4cG9ydHMubGluZWFyTWFwID0gbGluZWFyTWFwOwpleHBvcnRzLnBhcnNlUGVyY2VudCA9IHBhcnNlUGVyY2VudDsKZXhwb3J0cy5yb3VuZCA9IHJvdW5kOwpleHBvcnRzLmFzYyA9IGFzYzsKZXhwb3J0cy5nZXRQcmVjaXNpb24gPSBnZXRQcmVjaXNpb247CmV4cG9ydHMuZ2V0UHJlY2lzaW9uU2FmZSA9IGdldFByZWNpc2lvblNhZmU7CmV4cG9ydHMuZ2V0UGl4ZWxQcmVjaXNpb24gPSBnZXRQaXhlbFByZWNpc2lvbjsKZXhwb3J0cy5nZXRQZXJjZW50V2l0aFByZWNpc2lvbiA9IGdldFBlcmNlbnRXaXRoUHJlY2lzaW9uOwpleHBvcnRzLk1BWF9TQUZFX0lOVEVHRVIgPSBNQVhfU0FGRV9JTlRFR0VSOwpleHBvcnRzLnJlbVJhZGlhbiA9IHJlbVJhZGlhbjsKZXhwb3J0cy5pc1JhZGlhbkFyb3VuZFplcm8gPSBpc1JhZGlhbkFyb3VuZFplcm87CmV4cG9ydHMucGFyc2VEYXRlID0gcGFyc2VEYXRlOwpleHBvcnRzLnF1YW50aXR5ID0gcXVhbnRpdHk7CmV4cG9ydHMucXVhbnRpdHlFeHBvbmVudCA9IHF1YW50aXR5RXhwb25lbnQ7CmV4cG9ydHMubmljZSA9IG5pY2U7CmV4cG9ydHMucXVhbnRpbGUgPSBxdWFudGlsZTsKZXhwb3J0cy5yZWZvcm1JbnRlcnZhbHMgPSByZWZvcm1JbnRlcnZhbHM7CmV4cG9ydHMuaXNOdW1lcmljID0gaXNOdW1lcmljOw=="},{"version":3,"sources":["/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/echarts/lib/util/number.js"],"names":["zrUtil","require","RADIAN_EPSILON","_trim","str","replace","linearMap","val","domain","range","clamp","subDomain","subRange","parsePercent","percent","all","match","parseFloat","NaN","round","x","precision","returnStr","Math","min","max","toFixed","asc","arr","sort","a","b","getPrecision","isNaN","e","count","getPrecisionSafe","toString","eIndex","indexOf","slice","dotIndex","length","getPixelPrecision","dataExtent","pixelExtent","log","LN10","dataQuantity","floor","sizeQuantity","abs","isFinite","getPercentWithPrecision","valueList","idx","sum","reduce","acc","digits","pow","votesPerQuota","map","targetSeats","seats","votes","currentSum","remainder","Number","NEGATIVE_INFINITY","maxId","i","len","MAX_SAFE_INTEGER","remRadian","radian","pi2","PI","isRadianAroundZero","TIME_REG","parseDate","value","Date","exec","hour","toUpperCase","UTC","quantity","quantityExponent","exp","nice","exponent","exp10","f","nf","quantile","ascArr","p","H","h","v","reformIntervals","list","littleThan","curr","Infinity","currClose","interval","close","lg","splice","isNumeric","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The method \"quantile\" was copied from \"d3.js\".\n* (See more details in the comment of the method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the license of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\nvar RADIAN_EPSILON = 1e-4;\n\nfunction _trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n/**\n * Linear mapping a value from domain to range\n * @memberOf module:echarts/util/number\n * @param  {(number|Array.<number>)} val\n * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n * @param  {boolean} clamp\n * @return {(number|Array.<number>}\n */\n\n\nfunction linearMap(val, domain, range, clamp) {\n  var subDomain = domain[1] - domain[0];\n  var subRange = range[1] - range[0];\n\n  if (subDomain === 0) {\n    return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;\n  } // Avoid accuracy problem in edge, such as\n  // 146.39 - 62.83 === 83.55999999999999.\n  // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n  // It is a little verbose for efficiency considering this method\n  // is a hotspot.\n\n\n  if (clamp) {\n    if (subDomain > 0) {\n      if (val <= domain[0]) {\n        return range[0];\n      } else if (val >= domain[1]) {\n        return range[1];\n      }\n    } else {\n      if (val >= domain[0]) {\n        return range[0];\n      } else if (val <= domain[1]) {\n        return range[1];\n      }\n    }\n  } else {\n    if (val === domain[0]) {\n      return range[0];\n    }\n\n    if (val === domain[1]) {\n      return range[1];\n    }\n  }\n\n  return (val - domain[0]) / subDomain * subRange + range[0];\n}\n/**\n * Convert a percent string to absolute number.\n * Returns NaN if percent is not a valid string or number\n * @memberOf module:echarts/util/number\n * @param {string|number} percent\n * @param {number} all\n * @return {number}\n */\n\n\nfunction parsePercent(percent, all) {\n  switch (percent) {\n    case 'center':\n    case 'middle':\n      percent = '50%';\n      break;\n\n    case 'left':\n    case 'top':\n      percent = '0%';\n      break;\n\n    case 'right':\n    case 'bottom':\n      percent = '100%';\n      break;\n  }\n\n  if (typeof percent === 'string') {\n    if (_trim(percent).match(/%$/)) {\n      return parseFloat(percent) / 100 * all;\n    }\n\n    return parseFloat(percent);\n  }\n\n  return percent == null ? NaN : +percent;\n}\n/**\n * (1) Fix rounding error of float numbers.\n * (2) Support return string to avoid scientific notation like '3.5e-7'.\n *\n * @param {number} x\n * @param {number} [precision]\n * @param {boolean} [returnStr]\n * @return {number|string}\n */\n\n\nfunction round(x, precision, returnStr) {\n  if (precision == null) {\n    precision = 10;\n  } // Avoid range error\n\n\n  precision = Math.min(Math.max(0, precision), 20);\n  x = (+x).toFixed(precision);\n  return returnStr ? x : +x;\n}\n/**\n * asc sort arr.\n * The input arr will be modified.\n *\n * @param {Array} arr\n * @return {Array} The input arr.\n */\n\n\nfunction asc(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  return arr;\n}\n/**\n * Get precision\n * @param {number} val\n */\n\n\nfunction getPrecision(val) {\n  val = +val;\n\n  if (isNaN(val)) {\n    return 0;\n  } // It is much faster than methods converting number to string as follows\n  //      var tmp = val.toString();\n  //      return tmp.length - 1 - tmp.indexOf('.');\n  // especially when precision is low\n\n\n  var e = 1;\n  var count = 0;\n\n  while (Math.round(val * e) / e !== val) {\n    e *= 10;\n    count++;\n  }\n\n  return count;\n}\n/**\n * @param {string|number} val\n * @return {number}\n */\n\n\nfunction getPrecisionSafe(val) {\n  var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'\n\n  var eIndex = str.indexOf('e');\n\n  if (eIndex > 0) {\n    var precision = +str.slice(eIndex + 1);\n    return precision < 0 ? -precision : 0;\n  } else {\n    var dotIndex = str.indexOf('.');\n    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n  }\n}\n/**\n * Minimal dicernible data precisioin according to a single pixel.\n *\n * @param {Array.<number>} dataExtent\n * @param {Array.<number>} pixelExtent\n * @return {number} precision\n */\n\n\nfunction getPixelPrecision(dataExtent, pixelExtent) {\n  var log = Math.log;\n  var LN10 = Math.LN10;\n  var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n  var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.\n\n  var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n  return !isFinite(precision) ? 20 : precision;\n}\n/**\n * Get a data of given precision, assuring the sum of percentages\n * in valueList is 1.\n * The largest remainer method is used.\n * https://en.wikipedia.org/wiki/Largest_remainder_method\n *\n * @param {Array.<number>} valueList a list of all data\n * @param {number} idx index of the data to be processed in valueList\n * @param {number} precision integer number showing digits of precision\n * @return {number} percent ranging from 0 to 100\n */\n\n\nfunction getPercentWithPrecision(valueList, idx, precision) {\n  if (!valueList[idx]) {\n    return 0;\n  }\n\n  var sum = zrUtil.reduce(valueList, function (acc, val) {\n    return acc + (isNaN(val) ? 0 : val);\n  }, 0);\n\n  if (sum === 0) {\n    return 0;\n  }\n\n  var digits = Math.pow(10, precision);\n  var votesPerQuota = zrUtil.map(valueList, function (val) {\n    return (isNaN(val) ? 0 : val) / sum * digits * 100;\n  });\n  var targetSeats = digits * 100;\n  var seats = zrUtil.map(votesPerQuota, function (votes) {\n    // Assign automatic seats.\n    return Math.floor(votes);\n  });\n  var currentSum = zrUtil.reduce(seats, function (acc, val) {\n    return acc + val;\n  }, 0);\n  var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {\n    return votes - seats[idx];\n  }); // Has remainding votes.\n\n  while (currentSum < targetSeats) {\n    // Find next largest remainder.\n    var max = Number.NEGATIVE_INFINITY;\n    var maxId = null;\n\n    for (var i = 0, len = remainder.length; i < len; ++i) {\n      if (remainder[i] > max) {\n        max = remainder[i];\n        maxId = i;\n      }\n    } // Add a vote to max remainder.\n\n\n    ++seats[maxId];\n    remainder[maxId] = 0;\n    ++currentSum;\n  }\n\n  return seats[idx] / digits;\n} // Number.MAX_SAFE_INTEGER, ie do not support.\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * To 0 - 2 * PI, considering negative radian.\n * @param {number} radian\n * @return {number}\n */\n\nfunction remRadian(radian) {\n  var pi2 = Math.PI * 2;\n  return (radian % pi2 + pi2) % pi2;\n}\n/**\n * @param {type} radian\n * @return {boolean}\n */\n\n\nfunction isRadianAroundZero(val) {\n  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n}\n/* eslint-disable */\n\n\nvar TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n/* eslint-enable */\n\n/**\n * @param {string|Date|number} value These values can be accepted:\n *   + An instance of Date, represent a time in its own time zone.\n *   + Or string in a subset of ISO 8601, only including:\n *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n *     all of which will be treated as local time if time zone is not specified\n *     (see <https://momentjs.com/>).\n *   + Or other string format, including (all of which will be treated as loacal time):\n *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n *   + a timestamp, which represent a time in UTC.\n * @return {Date} date\n */\n\nfunction parseDate(value) {\n  if (value instanceof Date) {\n    return value;\n  } else if (typeof value === 'string') {\n    // Different browsers parse date in different way, so we parse it manually.\n    // Some other issues:\n    // new Date('1970-01-01') is UTC,\n    // new Date('1970/01/01') and new Date('1970-1-01') is local.\n    // See issue #3623\n    var match = TIME_REG.exec(value);\n\n    if (!match) {\n      // return Invalid Date.\n      return new Date(NaN);\n    } // Use local time when no timezone offset specifed.\n\n\n    if (!match[8]) {\n      // match[n] can only be string or undefined.\n      // But take care of '12' + 1 => '121'.\n      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);\n    } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,\n    // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).\n    // For example, system timezone is set as \"Time Zone: America/Toronto\",\n    // then these code will get different result:\n    // `new Date(1478411999999).getTimezoneOffset();  // get 240`\n    // `new Date(1478412000000).getTimezoneOffset();  // get 300`\n    // So we should not use `new Date`, but use `Date.UTC`.\n    else {\n        var hour = +match[4] || 0;\n\n        if (match[8].toUpperCase() !== 'Z') {\n          hour -= match[8].slice(0, 3);\n        }\n\n        return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));\n      }\n  } else if (value == null) {\n    return new Date(NaN);\n  }\n\n  return new Date(Math.round(value));\n}\n/**\n * Quantity of a number. e.g. 0.1, 1, 10, 100\n *\n * @param  {number} val\n * @return {number}\n */\n\n\nfunction quantity(val) {\n  return Math.pow(10, quantityExponent(val));\n}\n/**\n * Exponent of the quantity of a number\n * e.g., 1234 equals to 1.234*10^3, so quantityExponent(1234) is 3\n *\n * @param  {number} val non-negative value\n * @return {number}\n */\n\n\nfunction quantityExponent(val) {\n  if (val === 0) {\n    return 0;\n  }\n\n  var exp = Math.floor(Math.log(val) / Math.LN10);\n  /**\n   * exp is expected to be the rounded-down result of the base-10 log of val.\n   * But due to the precision loss with Math.log(val), we need to restore it\n   * using 10^exp to make sure we can get val back from exp. #11249\n   */\n\n  if (val / Math.pow(10, exp) >= 10) {\n    exp++;\n  }\n\n  return exp;\n}\n/**\n * find a “nice” number approximately equal to x. Round the number if round = true,\n * take ceiling if round = false. The primary observation is that the “nicest”\n * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n *\n * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n *\n * @param  {number} val Non-negative value.\n * @param  {boolean} round\n * @return {number}\n */\n\n\nfunction nice(val, round) {\n  var exponent = quantityExponent(val);\n  var exp10 = Math.pow(10, exponent);\n  var f = val / exp10; // 1 <= f < 10\n\n  var nf;\n\n  if (round) {\n    if (f < 1.5) {\n      nf = 1;\n    } else if (f < 2.5) {\n      nf = 2;\n    } else if (f < 4) {\n      nf = 3;\n    } else if (f < 7) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  } else {\n    if (f < 1) {\n      nf = 1;\n    } else if (f < 2) {\n      nf = 2;\n    } else if (f < 3) {\n      nf = 3;\n    } else if (f < 5) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  }\n\n  val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n  // 20 is the uppper bound of toFixed.\n\n  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n}\n/**\n * This code was copied from \"d3.js\"\n * <https://github.com/d3/d3/blob/9cc9a875e636a1dcf36cc1e07bdf77e1ad6e2c74/src/arrays/quantile.js>.\n * See the license statement at the head of this file.\n * @param {Array.<number>} ascArr\n */\n\n\nfunction quantile(ascArr, p) {\n  var H = (ascArr.length - 1) * p + 1;\n  var h = Math.floor(H);\n  var v = +ascArr[h - 1];\n  var e = H - h;\n  return e ? v + e * (ascArr[h] - v) : v;\n}\n/**\n * Order intervals asc, and split them when overlap.\n * expect(numberUtil.reformIntervals([\n *     {interval: [18, 62], close: [1, 1]},\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [1, 1]},\n *     {interval: [62, 150], close: [1, 1]},\n *     {interval: [106, 150], close: [1, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ])).toEqual([\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [0, 1]},\n *     {interval: [18, 62], close: [0, 1]},\n *     {interval: [62, 150], close: [0, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ]);\n * @param {Array.<Object>} list, where `close` mean open or close\n *        of the interval, and Infinity can be used.\n * @return {Array.<Object>} The origin list, which has been reformed.\n */\n\n\nfunction reformIntervals(list) {\n  list.sort(function (a, b) {\n    return littleThan(a, b, 0) ? -1 : 1;\n  });\n  var curr = -Infinity;\n  var currClose = 1;\n\n  for (var i = 0; i < list.length;) {\n    var interval = list[i].interval;\n    var close = list[i].close;\n\n    for (var lg = 0; lg < 2; lg++) {\n      if (interval[lg] <= curr) {\n        interval[lg] = curr;\n        close[lg] = !lg ? 1 - currClose : 1;\n      }\n\n      curr = interval[lg];\n      currClose = close[lg];\n    }\n\n    if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n      list.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n\n  return list;\n\n  function littleThan(a, b, lg) {\n    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));\n  }\n}\n/**\n * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n * subtraction forces infinities to NaN\n *\n * @param {*} v\n * @return {boolean}\n */\n\n\nfunction isNumeric(v) {\n  return v - parseFloat(v) >= 0;\n}\n\nexports.linearMap = linearMap;\nexports.parsePercent = parsePercent;\nexports.round = round;\nexports.asc = asc;\nexports.getPrecision = getPrecision;\nexports.getPrecisionSafe = getPrecisionSafe;\nexports.getPixelPrecision = getPixelPrecision;\nexports.getPercentWithPrecision = getPercentWithPrecision;\nexports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nexports.remRadian = remRadian;\nexports.isRadianAroundZero = isRadianAroundZero;\nexports.parseDate = parseDate;\nexports.quantity = quantity;\nexports.quantityExponent = quantityExponent;\nexports.nice = nice;\nexports.quantile = quantile;\nexports.reformIntervals = reformIntervals;\nexports.isNumeric = isNumeric;"]}]}