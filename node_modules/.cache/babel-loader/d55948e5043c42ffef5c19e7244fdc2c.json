{"remainingRequest":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/babel-loader/lib/index.js!/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/echarts/lib/chart/helper/multipleGraphEdgeHelper.js","dependencies":[{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/echarts/lib/chart/helper/multipleGraphEdgeHelper.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/echarts/lib/chart/helper/multipleGraphEdgeHelper.js"],"names":["zrUtil","require","KEY_DELIMITER","getAutoCurvenessParams","seriesModel","get","createCurveness","appendLength","autoCurvenessParmas","length","curvenessList","isArray","__curvenessList","len","i","push","getKeyOfEdges","n1","n2","source","id","dataIndex","join","target","uid","getOppositeKey","key","keys","split","getEdgeFromMap","edge","node1","node2","__edgeMap","getTotalLengthBetweenNodes","getEdgeMapLengthWithKey","lenV","edgeMap","initCurvenessList","createEdgeMapForCurveness","index","oppositeEdges","isForward","getCurvenessForEdge","needReverse","autoCurvenessParams","isArrayParam","edgeArray","edgeIndex","totalLen","lineStyle","curKey","parityCorrection","oppositeKey","resValue","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar KEY_DELIMITER = '-->';\n/**\n * params handler\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @returns {*}\n */\n\nvar getAutoCurvenessParams = function (seriesModel) {\n  return seriesModel.get('autoCurveness') || null;\n};\n/**\n * Generate a list of edge curvatures, 20 is the default\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param {number} appendLength\n * @return  20 => [0, -0.2, 0.2, -0.4, 0.4, -0.6, 0.6, -0.8, 0.8, -1, 1, -1.2, 1.2, -1.4, 1.4, -1.6, 1.6, -1.8, 1.8, -2]\n */\n\n\nvar createCurveness = function (seriesModel, appendLength) {\n  var autoCurvenessParmas = getAutoCurvenessParams(seriesModel);\n  var length = 20;\n  var curvenessList = []; // handler the function set\n\n  if (typeof autoCurvenessParmas === 'number') {\n    length = autoCurvenessParmas;\n  } else if (zrUtil.isArray(autoCurvenessParmas)) {\n    seriesModel.__curvenessList = autoCurvenessParmas;\n    return;\n  } // append length\n\n\n  if (appendLength > length) {\n    length = appendLength;\n  } // make sure the length is even\n\n\n  var len = length % 2 ? length + 2 : length + 3;\n  curvenessList = [];\n\n  for (var i = 0; i < len; i++) {\n    curvenessList.push((i % 2 ? i + 1 : i) / 10 * (i % 2 ? -1 : 1));\n  }\n\n  seriesModel.__curvenessList = curvenessList;\n};\n/**\n * Create different cache key data in the positive and negative directions, in order to set the curvature later\n * @param {number|string|module:echarts/data/Graph.Node} n1\n * @param {number|string|module:echarts/data/Graph.Node} n2\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @returns {string} key\n */\n\n\nvar getKeyOfEdges = function (n1, n2, seriesModel) {\n  var source = [n1.id, n1.dataIndex].join('.');\n  var target = [n2.id, n2.dataIndex].join('.');\n  return [seriesModel.uid, source, target].join(KEY_DELIMITER);\n};\n/**\n * get opposite key\n * @param {string} key\n * @returns {string}\n */\n\n\nvar getOppositeKey = function (key) {\n  var keys = key.split(KEY_DELIMITER);\n  return [keys[0], keys[2], keys[1]].join(KEY_DELIMITER);\n};\n/**\n * get edgeMap with key\n * @param edge\n * @param {module:echarts/model/SeriesModel} seriesModel\n */\n\n\nvar getEdgeFromMap = function (edge, seriesModel) {\n  var key = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  return seriesModel.__edgeMap[key];\n};\n/**\n * calculate all cases total length\n * @param edge\n * @param seriesModel\n * @returns {number}\n */\n\n\nvar getTotalLengthBetweenNodes = function (edge, seriesModel) {\n  var len = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node1, edge.node2, seriesModel), seriesModel);\n  var lenV = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node2, edge.node1, seriesModel), seriesModel);\n  return len + lenV;\n};\n/**\n *\n * @param key\n */\n\n\nvar getEdgeMapLengthWithKey = function (key, seriesModel) {\n  var edgeMap = seriesModel.__edgeMap;\n  return edgeMap[key] ? edgeMap[key].length : 0;\n};\n/**\n * Count the number of edges between the same two points, used to obtain the curvature table and the parity of the edge\n * @see /graph/GraphSeries.js@getInitialData\n * @param {module:echarts/model/SeriesModel} seriesModel\n */\n\n\nfunction initCurvenessList(seriesModel) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  seriesModel.__curvenessList = [];\n  seriesModel.__edgeMap = {}; // calc the array of curveness List\n\n  createCurveness(seriesModel);\n}\n/**\n * set edgeMap with key\n * @param {number|string|module:echarts/data/Graph.Node} n1\n * @param {number|string|module:echarts/data/Graph.Node} n2\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param {number} index\n */\n\n\nfunction createEdgeMapForCurveness(n1, n2, seriesModel, index) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  var key = getKeyOfEdges(n1, n2, seriesModel);\n  var edgeMap = seriesModel.__edgeMap;\n  var oppositeEdges = edgeMap[getOppositeKey(key)]; // set direction\n\n  if (edgeMap[key] && !oppositeEdges) {\n    edgeMap[key].isForward = true;\n  } else if (oppositeEdges && edgeMap[key]) {\n    oppositeEdges.isForward = true;\n    edgeMap[key].isForward = false;\n  }\n\n  edgeMap[key] = edgeMap[key] || [];\n  edgeMap[key].push(index);\n}\n/**\n * get curvature for edge\n * @param edge\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param index\n */\n\n\nfunction getCurvenessForEdge(edge, seriesModel, index, needReverse) {\n  var autoCurvenessParams = getAutoCurvenessParams(seriesModel);\n  var isArrayParam = zrUtil.isArray(autoCurvenessParams);\n\n  if (!autoCurvenessParams) {\n    return null;\n  }\n\n  var edgeArray = getEdgeFromMap(edge, seriesModel);\n\n  if (!edgeArray) {\n    return null;\n  }\n\n  var edgeIndex = -1;\n\n  for (var i = 0; i < edgeArray.length; i++) {\n    if (edgeArray[i] === index) {\n      edgeIndex = i;\n      break;\n    }\n  } // if totalLen is Longer createCurveness\n\n\n  var totalLen = getTotalLengthBetweenNodes(edge, seriesModel);\n  createCurveness(seriesModel, totalLen);\n  edge.lineStyle = edge.lineStyle || {}; // if is opposite edge, must set curvenss to opposite number\n\n  var curKey = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  var curvenessList = seriesModel.__curvenessList; // if pass array no need parity\n\n  var parityCorrection = isArrayParam ? 0 : totalLen % 2 ? 0 : 1;\n\n  if (!edgeArray.isForward) {\n    // the opposite edge show outside\n    var oppositeKey = getOppositeKey(curKey);\n    var len = getEdgeMapLengthWithKey(oppositeKey, seriesModel);\n    var resValue = curvenessList[edgeIndex + len + parityCorrection]; // isNeedReverse, simple, force type need reverse the curveness in the junction of the forword and the opposite\n\n    if (needReverse) {\n      // set as array may make the parity handle with the len of opposite\n      if (isArrayParam) {\n        if (autoCurvenessParams && autoCurvenessParams[0] === 0) {\n          return (len + parityCorrection) % 2 ? resValue : -resValue;\n        } else {\n          return ((len % 2 ? 0 : 1) + parityCorrection) % 2 ? resValue : -resValue;\n        }\n      } else {\n        return (len + parityCorrection) % 2 ? resValue : -resValue;\n      }\n    } else {\n      return curvenessList[edgeIndex + len + parityCorrection];\n    }\n  } else {\n    return curvenessList[parityCorrection + edgeIndex];\n  }\n}\n\nexports.initCurvenessList = initCurvenessList;\nexports.createEdgeMapForCurveness = createEdgeMapForCurveness;\nexports.getCurvenessForEdge = getCurvenessForEdge;"]}]}