{"remainingRequest":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/babel-loader/lib/index.js!/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/echarts/lib/chart/treemap/TreemapSeries.js","dependencies":[{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/echarts/lib/chart/treemap/TreemapSeries.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/echarts/lib/chart/treemap/TreemapSeries.js"],"names":["zrUtil","require","SeriesModel","Tree","Model","_format","encodeHTML","addCommas","_treeHelper","wrapTreePathInfo","_default","extend","type","layoutMode","dependencies","preventUsingHoverLayer","_viewRoot","defaultOption","progressive","left","top","right","bottom","width","height","sort","clipWindow","squareRatio","Math","sqrt","leafDepth","drillDownIcon","zoomToNodeRatio","roam","nodeClick","animation","animationDurationUpdate","animationEasing","breadcrumb","show","emptyItemWidth","itemStyle","color","borderColor","borderWidth","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","textStyle","emphasis","label","distance","padding","position","ellipsis","upperLabel","verticalAlign","colorAlpha","colorSaturation","gapWidth","borderColorSaturation","visualDimension","visualMin","visualMax","colorMappingBy","visibleMin","childrenVisibleMin","levels","getInitialData","option","ecModel","root","name","children","data","completeTreeValue","designatedVisualItemStyle","designatedVisualModel","setDefault","levelModels","map","levelDefine","tree","createTree","beforeLink","nodeData","wrapMethod","model","idx","node","getNodeByDataIndex","levelModel","depth","parentModel","optionUpdated","resetViewRoot","formatTooltip","dataIndex","getData","value","getRawValue","formattedValue","isArray","getName","getDataParams","params","prototype","apply","arguments","treePathInfo","setLayoutInfo","layoutInfo","mapIdToIndex","id","idIndexMap","_idIndexMap","createHashMap","_idIndexMapCount","index","get","set","getViewRoot","viewRoot","getRawData","contains","dataNode","sum","each","child","childValue","thisValue","isNaN","globalColorList","hasColorDefine","modelColor","level0","slice","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar Model = require(\"../../model/Model\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\n\nvar _treeHelper = require(\"../helper/treeHelper\");\n\nvar wrapTreePathInfo = _treeHelper.wrapTreePathInfo;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = SeriesModel.extend({\n  type: 'series.treemap',\n  layoutMode: 'box',\n  dependencies: ['grid', 'polar'],\n  preventUsingHoverLayer: true,\n\n  /**\n   * @type {module:echarts/data/Tree~Node}\n   */\n  _viewRoot: null,\n  defaultOption: {\n    // Disable progressive rendering\n    progressive: 0,\n    // center: ['50%', '50%'],          // not supported in ec3.\n    // size: ['80%', '80%'],            // deprecated, compatible with ec2.\n    left: 'center',\n    top: 'middle',\n    right: null,\n    bottom: null,\n    width: '80%',\n    height: '80%',\n    sort: true,\n    // Can be null or false or true\n    // (order by desc default, asc not supported yet (strange effect))\n    clipWindow: 'origin',\n    // Size of clipped window when zooming. 'origin' or 'fullscreen'\n    squareRatio: 0.5 * (1 + Math.sqrt(5)),\n    // golden ratio\n    leafDepth: null,\n    // Nodes on depth from root are regarded as leaves.\n    // Count from zero (zero represents only view root).\n    drillDownIcon: '▶',\n    // Use html character temporarily because it is complicated\n    // to align specialized icon. ▷▶❒❐▼✚\n    zoomToNodeRatio: 0.32 * 0.32,\n    // Be effective when using zoomToNode. Specify the proportion of the\n    // target node area in the view area.\n    roam: true,\n    // true, false, 'scale' or 'zoom', 'move'.\n    nodeClick: 'zoomToNode',\n    // Leaf node click behaviour: 'zoomToNode', 'link', false.\n    // If leafDepth is set and clicking a node which has children but\n    // be on left depth, the behaviour would be changing root. Otherwise\n    // use behavious defined above.\n    animation: true,\n    animationDurationUpdate: 900,\n    animationEasing: 'quinticInOut',\n    breadcrumb: {\n      show: true,\n      height: 22,\n      left: 'center',\n      top: 'bottom',\n      // right\n      // bottom\n      emptyItemWidth: 25,\n      // Width of empty node.\n      itemStyle: {\n        color: 'rgba(0,0,0,0.7)',\n        //'#5793f3',\n        borderColor: 'rgba(255,255,255,0.7)',\n        borderWidth: 1,\n        shadowColor: 'rgba(150,150,150,1)',\n        shadowBlur: 3,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0,\n        textStyle: {\n          color: '#fff'\n        }\n      },\n      emphasis: {\n        textStyle: {}\n      }\n    },\n    label: {\n      show: true,\n      // Do not use textDistance, for ellipsis rect just the same as treemap node rect.\n      distance: 0,\n      padding: 5,\n      position: 'inside',\n      // Can be [5, '5%'] or position stirng like 'insideTopLeft', ...\n      // formatter: null,\n      color: '#fff',\n      ellipsis: true // align\n      // verticalAlign\n\n    },\n    upperLabel: {\n      // Label when node is parent.\n      show: false,\n      position: [0, '50%'],\n      height: 20,\n      // formatter: null,\n      color: '#fff',\n      ellipsis: true,\n      // align: null,\n      verticalAlign: 'middle'\n    },\n    itemStyle: {\n      color: null,\n      // Can be 'none' if not necessary.\n      colorAlpha: null,\n      // Can be 'none' if not necessary.\n      colorSaturation: null,\n      // Can be 'none' if not necessary.\n      borderWidth: 0,\n      gapWidth: 0,\n      borderColor: '#fff',\n      borderColorSaturation: null // If specified, borderColor will be ineffective, and the\n      // border color is evaluated by color of current node and\n      // borderColorSaturation.\n\n    },\n    emphasis: {\n      upperLabel: {\n        show: true,\n        position: [0, '50%'],\n        color: '#fff',\n        ellipsis: true,\n        verticalAlign: 'middle'\n      }\n    },\n    visualDimension: 0,\n    // Can be 0, 1, 2, 3.\n    visualMin: null,\n    visualMax: null,\n    color: [],\n    // + treemapSeries.color should not be modified. Please only modified\n    // level[n].color (if necessary).\n    // + Specify color list of each level. level[0].color would be global\n    // color list if not specified. (see method `setDefault`).\n    // + But set as a empty array to forbid fetch color from global palette\n    // when using nodeModel.get('color'), otherwise nodes on deep level\n    // will always has color palette set and are not able to inherit color\n    // from parent node.\n    // + TreemapSeries.color can not be set as 'none', otherwise effect\n    // legend color fetching (see seriesColor.js).\n    colorAlpha: null,\n    // Array. Specify color alpha range of each level, like [0.2, 0.8]\n    colorSaturation: null,\n    // Array. Specify color saturation of each level, like [0.2, 0.5]\n    colorMappingBy: 'index',\n    // 'value' or 'index' or 'id'.\n    visibleMin: 10,\n    // If area less than this threshold (unit: pixel^2), node will not\n    // be rendered. Only works when sort is 'asc' or 'desc'.\n    childrenVisibleMin: null,\n    // If area of a node less than this threshold (unit: pixel^2),\n    // grandchildren will not show.\n    // Why grandchildren? If not grandchildren but children,\n    // some siblings show children and some not,\n    // the appearance may be mess and not consistent,\n    levels: [] // Each item: {\n    //     visibleMin, itemStyle, visualDimension, label\n    // }\n    // data: {\n    //      value: [],\n    //      children: [],\n    //      link: 'http://xxx.xxx.xxx',\n    //      target: 'blank' or 'self'\n    // }\n\n  },\n\n  /**\n   * @override\n   */\n  getInitialData: function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levels = option.levels || []; // Used in \"visual priority\" in `treemapVisual.js`.\n    // This way is a little tricky, must satisfy the precondition:\n    //   1. There is no `treeNode.getModel('itemStyle.xxx')` used.\n    //   2. The `Model.prototype.getModel()` will not use any clone-like way.\n\n    var designatedVisualItemStyle = this.designatedVisualItemStyle = {};\n    var designatedVisualModel = new Model({\n      itemStyle: designatedVisualItemStyle\n    }, this, ecModel);\n    levels = option.levels = setDefault(levels, ecModel);\n    var levelModels = zrUtil.map(levels || [], function (levelDefine) {\n      return new Model(levelDefine, designatedVisualModel, ecModel);\n    }, this); // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n\n    var tree = Tree.createTree(root, this, beforeLink);\n\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n        var levelModel = levelModels[node.depth]; // If no levelModel, we also need `designatedVisualModel`.\n\n        model.parentModel = levelModel || designatedVisualModel;\n        return model;\n      });\n    }\n\n    return tree.data;\n  },\n  optionUpdated: function () {\n    this.resetViewRoot();\n  },\n\n  /**\n   * @override\n   * @param {number} dataIndex\n   * @param {boolean} [mutipleSeries=false]\n   */\n  formatTooltip: function (dataIndex) {\n    var data = this.getData();\n    var value = this.getRawValue(dataIndex);\n    var formattedValue = zrUtil.isArray(value) ? addCommas(value[0]) : addCommas(value);\n    var name = data.getName(dataIndex);\n    return encodeHTML(name + ': ' + formattedValue);\n  },\n\n  /**\n   * Add tree path to tooltip param\n   *\n   * @override\n   * @param {number} dataIndex\n   * @return {Object}\n   */\n  getDataParams: function (dataIndex) {\n    var params = SeriesModel.prototype.getDataParams.apply(this, arguments);\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treePathInfo = wrapTreePathInfo(node, this);\n    return params;\n  },\n\n  /**\n   * @public\n   * @param {Object} layoutInfo {\n   *                                x: containerGroup x\n   *                                y: containerGroup y\n   *                                width: containerGroup width\n   *                                height: containerGroup height\n   *                            }\n   */\n  setLayoutInfo: function (layoutInfo) {\n    /**\n     * @readOnly\n     * @type {Object}\n     */\n    this.layoutInfo = this.layoutInfo || {};\n    zrUtil.extend(this.layoutInfo, layoutInfo);\n  },\n\n  /**\n   * @param  {string} id\n   * @return {number} index\n   */\n  mapIdToIndex: function (id) {\n    // A feature is implemented:\n    // index is monotone increasing with the sequence of\n    // input id at the first time.\n    // This feature can make sure that each data item and its\n    // mapped color have the same index between data list and\n    // color list at the beginning, which is useful for user\n    // to adjust data-color mapping.\n\n    /**\n     * @private\n     * @type {Object}\n     */\n    var idIndexMap = this._idIndexMap;\n\n    if (!idIndexMap) {\n      idIndexMap = this._idIndexMap = zrUtil.createHashMap();\n      /**\n       * @private\n       * @type {number}\n       */\n\n      this._idIndexMapCount = 0;\n    }\n\n    var index = idIndexMap.get(id);\n\n    if (index == null) {\n      idIndexMap.set(id, index = this._idIndexMapCount++);\n    }\n\n    return index;\n  },\n  getViewRoot: function () {\n    return this._viewRoot;\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~Node} [viewRoot]\n   */\n  resetViewRoot: function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getRawData().tree.root;\n\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  }\n});\n/**\n * @param {Object} dataNode\n */\n\n\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value;\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  } // Value should not less than 0.\n\n\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n/**\n * set default to level configuration\n */\n\n\nfunction setDefault(levels, ecModel) {\n  var globalColorList = ecModel.get('color');\n\n  if (!globalColorList) {\n    return;\n  }\n\n  levels = levels || [];\n  var hasColorDefine;\n  zrUtil.each(levels, function (levelDefine) {\n    var model = new Model(levelDefine);\n    var modelColor = model.get('color');\n\n    if (model.get('itemStyle.color') || modelColor && modelColor !== 'none') {\n      hasColorDefine = true;\n    }\n  });\n\n  if (!hasColorDefine) {\n    var level0 = levels[0] || (levels[0] = {});\n    level0.color = globalColorList.slice();\n  }\n\n  return levels;\n}\n\nmodule.exports = _default;"]}]}