{"remainingRequest":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/id-repair/Documents/SEOL/4c-dashboard/src/components/ChartToCsv/index.vue?vue&type=style&index=0&id=378c98c0&lang=scss&scoped=true&","dependencies":[{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/src/components/ChartToCsv/index.vue","mtime":1620600124101},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/id-repair/Documents/SEOL/4c-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jaGFydC10by1jc3YgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDIwcHg7CiAgcmlnaHQ6IDIwcHg7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIGN1cnNvcjogcG9pbnRlcjsKICB6LWluZGV4OiAxOwogIDpob3ZlciB7CiAgICBiYWNrZ3JvdW5kOiAjZDVkYmU3OwogIH0KfQoKLmNoYXJ0LXRvLWNzdiAuY2hhcnRDc3ZJY29uIHsKICBmaWxsOiAjOTQ5NDk0OwogIGJhY2tncm91bmQ6IG5vbmU7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/ChartToCsv","sourcesContent":["<template>\n  <div v-show=\"visible\" class=\"chart-to-csv\" @click=\"makeCSV\">\n    <svg-icon name=\"part03-s-file-csv\" class=\"chartCsvIcon\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator'\nimport XLSX from 'xlsx'\n\n@Component({\n  name: 'ChartToCsv'\n})\nexport default class extends Vue {\n  @Prop({ required: true }) private chartItems!: any\n  @Prop({ required: true }) private chartTitle!: string\n\n  private items = []\n  private visible = true\n  private regexpSpecial = /[&/\\\\#,+()$~%'\":*?<>{}|]/g\n  private regexpBlank = /(\\s)/g\n  private async makeCSV() {\n    const vm = this\n\n    // A workbook is the name given to an Excel file\n    const wb = XLSX.utils.book_new() // make Workbook of Excel\n\n    // make data\n    // initialize & Setting\n    let worksheet = this.chartTitle.replace(this.regexpSpecial, '-')\n\n    this.items = []\n\n    // parsing table data\n    if (this.chartItems.seriesData) {\n      this.items = this.chartItems.seriesData\n    } else if (this.chartItems.xAxisData) {\n      for (let i = 0; i < this.chartItems.xAxisData.length; i++) {\n        let item = {\n          category: this.chartItems.xAxisData[i]\n        }\n        for (let j = 0; j < this.chartItems.legend.length; j++) {\n          item[this.chartItems.legend[j]] = this.chartItems.series[j].data[i]\n        }\n        this.items.push(item)\n      }\n    } else {\n      for (let i = 0; i < this.chartItems.yAxisData.length; i++) {\n        let item = {\n          category: this.chartItems.yAxisData[i]\n        }\n        for (let j = 0; j < this.chartItems.legend.length; j++) {\n          item[this.chartItems.legend[j]] = this.chartItems.series[j].data[i]\n        }\n        this.items.push(item)\n      }\n    }\n\n    // export json to Worksheet of Excel\n    const reportWS = XLSX.utils.json_to_sheet(this.items)\n\n    // add Worksheet to Workbook\n    XLSX.utils.book_append_sheet(wb, reportWS, worksheet) // sheetAName is name of Worksheet\n\n    // export Excel files\n    // XLSX.writeFile(wb, `[${this.getDate}]${worksheet}.xlsx`)\n\n    XLSX.writeFile(wb, `${worksheet.replace(this.regexpBlank, '_')}.xlsx`)\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.chart-to-csv {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  display: inline-block;\n  cursor: pointer;\n  z-index: 1;\n  :hover {\n    background: #d5dbe7;\n  }\n}\n\n.chart-to-csv .chartCsvIcon {\n  fill: #949494;\n  background: none;\n}\n</style>\n"]}]}