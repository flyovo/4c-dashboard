{
  "/Users/philipstanislaus/Code/philipstanislaus/performant-array-to-tree/src/arrayToTree.spec.ts": {
    "path": "/Users/philipstanislaus/Code/philipstanislaus/performant-array-to-tree/src/arrayToTree.spec.ts",
    "statementMap": {
      "0": {
        "start": { "line": 2, "column": 0 },
        "end": { "line": 2, "column": 62 }
      },
      "1": {
        "start": { "line": 3, "column": 13 },
        "end": { "line": 3, "column": 28 }
      },
      "2": {
        "start": { "line": 4, "column": 20 },
        "end": { "line": 4, "column": 44 }
      },
      "3": {
        "start": { "line": 5, "column": 0 },
        "end": { "line": 397, "column": 3 }
      },
      "4": {
        "start": { "line": 6, "column": 4 },
        "end": { "line": 26, "column": 7 }
      },
      "5": {
        "start": { "line": 7, "column": 8 },
        "end": { "line": 25, "column": 11 }
      },
      "6": {
        "start": { "line": 27, "column": 4 },
        "end": { "line": 47, "column": 7 }
      },
      "7": {
        "start": { "line": 28, "column": 8 },
        "end": { "line": 46, "column": 11 }
      },
      "8": {
        "start": { "line": 48, "column": 4 },
        "end": { "line": 68, "column": 7 }
      },
      "9": {
        "start": { "line": 49, "column": 8 },
        "end": { "line": 67, "column": 11 }
      },
      "10": {
        "start": { "line": 69, "column": 4 },
        "end": { "line": 90, "column": 7 }
      },
      "11": {
        "start": { "line": 70, "column": 8 },
        "end": { "line": 89, "column": 11 }
      },
      "12": {
        "start": { "line": 91, "column": 4 },
        "end": { "line": 115, "column": 7 }
      },
      "13": {
        "start": { "line": 92, "column": 8 },
        "end": { "line": 114, "column": 11 }
      },
      "14": {
        "start": { "line": 116, "column": 4 },
        "end": { "line": 140, "column": 7 }
      },
      "15": {
        "start": { "line": 117, "column": 8 },
        "end": { "line": 139, "column": 11 }
      },
      "16": {
        "start": { "line": 141, "column": 4 },
        "end": { "line": 166, "column": 7 }
      },
      "17": {
        "start": { "line": 142, "column": 8 },
        "end": { "line": 165, "column": 11 }
      },
      "18": {
        "start": { "line": 167, "column": 4 },
        "end": { "line": 188, "column": 7 }
      },
      "19": {
        "start": { "line": 168, "column": 8 },
        "end": { "line": 187, "column": 11 }
      },
      "20": {
        "start": { "line": 189, "column": 4 },
        "end": { "line": 210, "column": 7 }
      },
      "21": {
        "start": { "line": 190, "column": 8 },
        "end": { "line": 209, "column": 11 }
      },
      "22": {
        "start": { "line": 211, "column": 4 },
        "end": { "line": 234, "column": 7 }
      },
      "23": {
        "start": { "line": 212, "column": 8 },
        "end": { "line": 233, "column": 11 }
      },
      "24": {
        "start": { "line": 235, "column": 4 },
        "end": { "line": 246, "column": 7 }
      },
      "25": {
        "start": { "line": 236, "column": 8 },
        "end": { "line": 245, "column": 11 }
      },
      "26": {
        "start": { "line": 247, "column": 4 },
        "end": { "line": 259, "column": 7 }
      },
      "27": {
        "start": { "line": 248, "column": 8 },
        "end": { "line": 258, "column": 118 }
      },
      "28": {
        "start": { "line": 249, "column": 12 },
        "end": { "line": 255, "column": 41 }
      },
      "29": {
        "start": { "line": 260, "column": 4 },
        "end": { "line": 282, "column": 7 }
      },
      "30": {
        "start": { "line": 261, "column": 8 },
        "end": { "line": 281, "column": 11 }
      },
      "31": {
        "start": { "line": 283, "column": 4 },
        "end": { "line": 296, "column": 7 }
      },
      "32": {
        "start": { "line": 284, "column": 8 },
        "end": { "line": 295, "column": 118 }
      },
      "33": {
        "start": { "line": 284, "column": 36 },
        "end": { "line": 293, "column": 11 }
      },
      "34": {
        "start": { "line": 297, "column": 4 },
        "end": { "line": 308, "column": 7 }
      },
      "35": {
        "start": { "line": 298, "column": 8 },
        "end": { "line": 307, "column": 76 }
      },
      "36": {
        "start": { "line": 298, "column": 36 },
        "end": { "line": 306, "column": 11 }
      },
      "37": {
        "start": { "line": 309, "column": 4 },
        "end": { "line": 319, "column": 7 }
      },
      "38": {
        "start": { "line": 310, "column": 8 },
        "end": { "line": 318, "column": 11 }
      },
      "39": {
        "start": { "line": 320, "column": 4 },
        "end": { "line": 322, "column": 7 }
      },
      "40": {
        "start": { "line": 321, "column": 8 },
        "end": { "line": 321, "column": 71 }
      },
      "41": {
        "start": { "line": 323, "column": 4 },
        "end": { "line": 354, "column": 7 }
      },
      "42": {
        "start": { "line": 324, "column": 8 },
        "end": { "line": 353, "column": 11 }
      },
      "43": {
        "start": { "line": 355, "column": 4 },
        "end": { "line": 368, "column": 7 }
      },
      "44": {
        "start": { "line": 356, "column": 8 },
        "end": { "line": 367, "column": 16 }
      },
      "45": {
        "start": { "line": 369, "column": 4 },
        "end": { "line": 382, "column": 7 }
      },
      "46": {
        "start": { "line": 370, "column": 8 },
        "end": { "line": 381, "column": 16 }
      },
      "47": {
        "start": { "line": 383, "column": 4 },
        "end": { "line": 396, "column": 7 }
      },
      "48": {
        "start": { "line": 384, "column": 8 },
        "end": { "line": 395, "column": 16 }
      }
    },
    "fnMap": {
      "0": {
        "name": "(anonymous_0)",
        "decl": {
          "start": { "line": 5, "column": 24 },
          "end": { "line": 5, "column": 25 }
        },
        "loc": {
          "start": { "line": 5, "column": 36 },
          "end": { "line": 397, "column": 1 }
        },
        "line": 5
      },
      "1": {
        "name": "(anonymous_1)",
        "decl": {
          "start": { "line": 6, "column": 42 },
          "end": { "line": 6, "column": 43 }
        },
        "loc": {
          "start": { "line": 6, "column": 54 },
          "end": { "line": 26, "column": 5 }
        },
        "line": 6
      },
      "2": {
        "name": "(anonymous_2)",
        "decl": {
          "start": { "line": 27, "column": 40 },
          "end": { "line": 27, "column": 41 }
        },
        "loc": {
          "start": { "line": 27, "column": 52 },
          "end": { "line": 47, "column": 5 }
        },
        "line": 27
      },
      "3": {
        "name": "(anonymous_3)",
        "decl": {
          "start": { "line": 48, "column": 58 },
          "end": { "line": 48, "column": 59 }
        },
        "loc": {
          "start": { "line": 48, "column": 70 },
          "end": { "line": 68, "column": 5 }
        },
        "line": 48
      },
      "4": {
        "name": "(anonymous_4)",
        "decl": {
          "start": { "line": 69, "column": 59 },
          "end": { "line": 69, "column": 60 }
        },
        "loc": {
          "start": { "line": 69, "column": 71 },
          "end": { "line": 90, "column": 5 }
        },
        "line": 69
      },
      "5": {
        "name": "(anonymous_5)",
        "decl": {
          "start": { "line": 91, "column": 69 },
          "end": { "line": 91, "column": 70 }
        },
        "loc": {
          "start": { "line": 91, "column": 81 },
          "end": { "line": 115, "column": 5 }
        },
        "line": 91
      },
      "6": {
        "name": "(anonymous_6)",
        "decl": {
          "start": { "line": 116, "column": 85 },
          "end": { "line": 116, "column": 86 }
        },
        "loc": {
          "start": { "line": 116, "column": 97 },
          "end": { "line": 140, "column": 5 }
        },
        "line": 116
      },
      "7": {
        "name": "(anonymous_7)",
        "decl": {
          "start": { "line": 141, "column": 86 },
          "end": { "line": 141, "column": 87 }
        },
        "loc": {
          "start": { "line": 141, "column": 98 },
          "end": { "line": 166, "column": 5 }
        },
        "line": 141
      },
      "8": {
        "name": "(anonymous_8)",
        "decl": {
          "start": { "line": 167, "column": 69 },
          "end": { "line": 167, "column": 70 }
        },
        "loc": {
          "start": { "line": 167, "column": 81 },
          "end": { "line": 188, "column": 5 }
        },
        "line": 167
      },
      "9": {
        "name": "(anonymous_9)",
        "decl": {
          "start": { "line": 189, "column": 77 },
          "end": { "line": 189, "column": 78 }
        },
        "loc": {
          "start": { "line": 189, "column": 89 },
          "end": { "line": 210, "column": 5 }
        },
        "line": 189
      },
      "10": {
        "name": "(anonymous_10)",
        "decl": {
          "start": { "line": 211, "column": 128 },
          "end": { "line": 211, "column": 129 }
        },
        "loc": {
          "start": { "line": 211, "column": 140 },
          "end": { "line": 234, "column": 5 }
        },
        "line": 211
      },
      "11": {
        "name": "(anonymous_11)",
        "decl": {
          "start": { "line": 235, "column": 72 },
          "end": { "line": 235, "column": 73 }
        },
        "loc": {
          "start": { "line": 235, "column": 84 },
          "end": { "line": 246, "column": 5 }
        },
        "line": 235
      },
      "12": {
        "name": "(anonymous_12)",
        "decl": {
          "start": { "line": 247, "column": 67 },
          "end": { "line": 247, "column": 68 }
        },
        "loc": {
          "start": { "line": 247, "column": 79 },
          "end": { "line": 259, "column": 5 }
        },
        "line": 247
      },
      "13": {
        "name": "(anonymous_13)",
        "decl": {
          "start": { "line": 248, "column": 22 },
          "end": { "line": 248, "column": 23 }
        },
        "loc": {
          "start": { "line": 248, "column": 34 },
          "end": { "line": 256, "column": 9 }
        },
        "line": 248
      },
      "14": {
        "name": "(anonymous_14)",
        "decl": {
          "start": { "line": 260, "column": 112 },
          "end": { "line": 260, "column": 113 }
        },
        "loc": {
          "start": { "line": 260, "column": 124 },
          "end": { "line": 282, "column": 5 }
        },
        "line": 260
      },
      "15": {
        "name": "(anonymous_15)",
        "decl": {
          "start": { "line": 283, "column": 116 },
          "end": { "line": 283, "column": 117 }
        },
        "loc": {
          "start": { "line": 283, "column": 128 },
          "end": { "line": 296, "column": 5 }
        },
        "line": 283
      },
      "16": {
        "name": "(anonymous_16)",
        "decl": {
          "start": { "line": 284, "column": 22 },
          "end": { "line": 284, "column": 23 }
        },
        "loc": {
          "start": { "line": 284, "column": 34 },
          "end": { "line": 293, "column": 13 }
        },
        "line": 284
      },
      "17": {
        "name": "(anonymous_17)",
        "decl": {
          "start": { "line": 297, "column": 103 },
          "end": { "line": 297, "column": 104 }
        },
        "loc": {
          "start": { "line": 297, "column": 115 },
          "end": { "line": 308, "column": 5 }
        },
        "line": 297
      },
      "18": {
        "name": "(anonymous_18)",
        "decl": {
          "start": { "line": 298, "column": 22 },
          "end": { "line": 298, "column": 23 }
        },
        "loc": {
          "start": { "line": 298, "column": 34 },
          "end": { "line": 306, "column": 13 }
        },
        "line": 298
      },
      "19": {
        "name": "(anonymous_19)",
        "decl": {
          "start": { "line": 309, "column": 69 },
          "end": { "line": 309, "column": 70 }
        },
        "loc": {
          "start": { "line": 309, "column": 81 },
          "end": { "line": 319, "column": 5 }
        },
        "line": 309
      },
      "20": {
        "name": "(anonymous_20)",
        "decl": {
          "start": { "line": 320, "column": 40 },
          "end": { "line": 320, "column": 41 }
        },
        "loc": {
          "start": { "line": 320, "column": 52 },
          "end": { "line": 322, "column": 5 }
        },
        "line": 320
      },
      "21": {
        "name": "(anonymous_21)",
        "decl": {
          "start": { "line": 323, "column": 80 },
          "end": { "line": 323, "column": 81 }
        },
        "loc": {
          "start": { "line": 323, "column": 92 },
          "end": { "line": 354, "column": 5 }
        },
        "line": 323
      },
      "22": {
        "name": "(anonymous_22)",
        "decl": {
          "start": { "line": 355, "column": 46 },
          "end": { "line": 355, "column": 47 }
        },
        "loc": {
          "start": { "line": 355, "column": 58 },
          "end": { "line": 368, "column": 5 }
        },
        "line": 355
      },
      "23": {
        "name": "(anonymous_23)",
        "decl": {
          "start": { "line": 369, "column": 52 },
          "end": { "line": 369, "column": 53 }
        },
        "loc": {
          "start": { "line": 369, "column": 64 },
          "end": { "line": 382, "column": 5 }
        },
        "line": 369
      },
      "24": {
        "name": "(anonymous_24)",
        "decl": {
          "start": { "line": 383, "column": 61 },
          "end": { "line": 383, "column": 62 }
        },
        "loc": {
          "start": { "line": 383, "column": 73 },
          "end": { "line": 396, "column": 5 }
        },
        "line": 383
      }
    },
    "branchMap": {},
    "s": {
      "0": 1,
      "1": 1,
      "2": 1,
      "3": 1,
      "4": 1,
      "5": 1,
      "6": 1,
      "7": 1,
      "8": 1,
      "9": 1,
      "10": 1,
      "11": 1,
      "12": 1,
      "13": 1,
      "14": 1,
      "15": 1,
      "16": 1,
      "17": 1,
      "18": 1,
      "19": 1,
      "20": 1,
      "21": 1,
      "22": 1,
      "23": 1,
      "24": 1,
      "25": 1,
      "26": 1,
      "27": 1,
      "28": 1,
      "29": 1,
      "30": 1,
      "31": 1,
      "32": 1,
      "33": 1,
      "34": 1,
      "35": 1,
      "36": 1,
      "37": 1,
      "38": 1,
      "39": 1,
      "40": 1,
      "41": 1,
      "42": 1,
      "43": 1,
      "44": 1,
      "45": 1,
      "46": 1,
      "47": 1,
      "48": 1
    },
    "f": {
      "0": 1,
      "1": 1,
      "2": 1,
      "3": 1,
      "4": 1,
      "5": 1,
      "6": 1,
      "7": 1,
      "8": 1,
      "9": 1,
      "10": 1,
      "11": 1,
      "12": 1,
      "13": 1,
      "14": 1,
      "15": 1,
      "16": 1,
      "17": 1,
      "18": 1,
      "19": 1,
      "20": 1,
      "21": 1,
      "22": 1,
      "23": 1,
      "24": 1
    },
    "b": {},
    "inputSourceMap": {
      "version": 3,
      "file": "/Users/philipstanislaus/Code/philipstanislaus/performant-array-to-tree/src/arrayToTree.spec.ts",
      "sources": [
        "/Users/philipstanislaus/Code/philipstanislaus/performant-array-to-tree/src/arrayToTree.spec.ts"
      ],
      "names": [],
      "mappings": "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",
      "sourcesContent": [
        "import { expect } from 'chai'\nimport { arrayToTree } from './arrayToTree'\n\ndescribe('arrayToTree', () => {\n  it('should work with nested objects', () => {\n    expect(arrayToTree([\n\t\t\t\t{ id: '4', parentId: null, custom: 'abc' },\n\t\t\t\t{ id: '31', parentId: '4', custom: '12' },\n\t\t\t\t{ id: '1941', parentId: '418', custom: 'de' },\n\t\t\t\t{ id: '1', parentId: '418', custom: 'ZZZz' },\n\t\t\t\t{ id: '418', parentId: null, custom: 'ü' },\n    ])).to.deep.equal([\n      {\n        data: { id: '4', parentId: null, custom: 'abc' },\n        children: [ { data: { id: '31', parentId: '4', custom: '12' }, children: [] } ],\n      },\n      {\n        data: { id: '418', parentId: null, custom: 'ü' },\n        children: [\n\t\t\t\t\t{ data: { id: '1941', parentId: '418', custom: 'de' }, children: [] },\n\t\t\t\t\t{ data: { id: '1', parentId: '418', custom: 'ZZZz' }, children: [] },\n        ],\n      },\n    ])\n  })\n\n  it('should work with integer keys', () => {\n    expect(arrayToTree([\n\t\t\t\t{ id: 4, parentId: null, custom: 'abc' },\n\t\t\t\t{ id: 31, parentId: 4, custom: '12' },\n\t\t\t\t{ id: 1941, parentId: 418, custom: 'de' },\n\t\t\t\t{ id: 1, parentId: 418, custom: 'ZZZz' },\n\t\t\t\t{ id: 418, parentId: null, custom: 'ü' },\n    ])).to.deep.equal([\n      {\n        data: { id: 4, parentId: null, custom: 'abc' },\n        children: [ { data: { id: 31, parentId: 4, custom: '12' }, children: [] } ],\n      },\n      {\n        data: { id: 418, parentId: null, custom: 'ü' },\n        children: [\n\t\t\t\t\t{ data: { id: 1941, parentId: 418, custom: 'de' }, children: [] },\n\t\t\t\t\t{ data: { id: 1, parentId: 418, custom: 'ZZZz' }, children: [] },\n        ],\n      },\n    ])\n  })\n\n  it('should work with nested objects and custom keys', () => {\n    expect(arrayToTree(\n      [\n\t\t\t\t\t{ num: '4', ref: null, custom: 'abc' },\n\t\t\t\t\t{ num: '31', ref: '4', custom: '12' },\n\t\t\t\t\t{ num: '1941', ref: '418', custom: 'de' },\n\t\t\t\t\t{ num: '1', ref: '418', custom: 'ZZZz' },\n\t\t\t\t\t{ num: '418', ref: null, custom: 'ü' },\n      ],\n\t\t\t\t{ id: 'num', parentId: 'ref', childrenField: 'nodes' },\n\t\t\t),\n\t\t).to.deep.equal([\n  {\n    data: { num: '4', ref: null, custom: 'abc' },\n    nodes: [ { data: { num: '31', ref: '4', custom: '12' }, nodes: [] } ],\n  },\n  {\n    data: { num: '418', ref: null, custom: 'ü' },\n    nodes: [\n\t\t\t\t\t{ data: { num: '1941', ref: '418', custom: 'de' }, nodes: [] },\n\t\t\t\t\t{ data: { num: '1', ref: '418', custom: 'ZZZz' }, nodes: [] },\n    ],\n  },\n])\n  })\n\n  it('should ignore objects if parentId does not exist', () => {\n    expect(arrayToTree([\n\t\t\t\t{ id: '4', parentId: null, custom: 'abc' },\n\t\t\t\t{ id: '31', parentId: '4', custom: '12' },\n\t\t\t\t{ id: '1941', parentId: '418', custom: 'de' },\n\t\t\t\t{ id: '1', parentId: '418', custom: 'ZZZz' },\n\t\t\t\t{ id: '418', parentId: null, custom: 'ü' },\n\t\t\t\t{ id: '1313', parentId: '13', custom: 'Not existing' },\n    ])).to.deep.equal([\n      {\n        data: { id: '4', parentId: null, custom: 'abc' },\n        children: [ { data: { id: '31', parentId: '4', custom: '12' }, children: [] } ],\n      },\n      {\n        data: { id: '418', parentId: null, custom: 'ü' },\n        children: [\n\t\t\t\t\t{ data: { id: '1941', parentId: '418', custom: 'de' }, children: [] },\n\t\t\t\t\t{ data: { id: '1', parentId: '418', custom: 'ZZZz' }, children: [] },\n        ],\n      },\n    ])\n  })\n\n  it('should work with nested objects with dataField set to null', () => {\n    expect(arrayToTree(\n      [\n\t\t\t\t\t{ id: '4', parentId: null, custom: 'abc' },\n\t\t\t\t\t{ id: '31', parentId: '4', custom: '12' },\n\t\t\t\t\t{ id: '1941', parentId: '418', custom: 'de' },\n\t\t\t\t\t{ id: '1', parentId: '418', custom: 'ZZZz' },\n\t\t\t\t\t{ id: '418', parentId: null, custom: 'ü' },\n      ],\n\t\t\t\t{ dataField: null },\n\t\t\t),\n\t\t).to.deep.equal([\n  {\n    id: '4',\n    parentId: null,\n    custom: 'abc',\n    children: [ { id: '31', parentId: '4', custom: '12', children: [] } ],\n  },\n  {\n    id: '418',\n    parentId: null,\n    custom: 'ü',\n    children: [\n\t\t\t\t\t{ id: '1941', parentId: '418', custom: 'de', children: [] },\n\t\t\t\t\t{ id: '1', parentId: '418', custom: 'ZZZz', children: [] },\n    ],\n  },\n])\n  })\n\n  it('should work with nested objects and custom keys with dataField set to null', () => {\n    expect(arrayToTree(\n      [\n\t\t\t\t\t{ num: '4', ref: null, custom: 'abc' },\n\t\t\t\t\t{ num: '31', ref: '4', custom: '12' },\n\t\t\t\t\t{ num: '1941', ref: '418', custom: 'de' },\n\t\t\t\t\t{ num: '1', ref: '418', custom: 'ZZZz' },\n\t\t\t\t\t{ num: '418', ref: null, custom: 'ü' },\n      ],\n\t\t\t\t{ id: 'num', parentId: 'ref', dataField: null },\n\t\t\t),\n\t\t).to.deep.equal([\n  {\n    num: '4',\n    ref: null,\n    custom: 'abc',\n    children: [ { num: '31', ref: '4', custom: '12', children: [] } ],\n  },\n  {\n    num: '418',\n    ref: null,\n    custom: 'ü',\n    children: [\n\t\t\t\t\t{ num: '1941', ref: '418', custom: 'de', children: [] },\n\t\t\t\t\t{ num: '1', ref: '418', custom: 'ZZZz', children: [] },\n    ],\n  },\n])\n  })\n\n  it('should ignore objects if parentId does not exist with dataField set to null', () => {\n    expect(arrayToTree(\n      [\n\t\t\t\t\t{ id: '4', parentId: null, custom: 'abc' },\n\t\t\t\t\t{ id: '31', parentId: '4', custom: '12' },\n\t\t\t\t\t{ id: '1941', parentId: '418', custom: 'de' },\n\t\t\t\t\t{ id: '1', parentId: '418', custom: 'ZZZz' },\n\t\t\t\t\t{ id: '418', parentId: null, custom: 'ü' },\n\t\t\t\t\t{ id: '1313', parentId: '13', custom: 'Not existing' },\n      ],\n\t\t\t\t{ dataField: null },\n\t\t\t),\n\t\t).to.deep.equal([\n  {\n    id: '4',\n    parentId: null,\n    custom: 'abc',\n    children: [ { id: '31', parentId: '4', custom: '12', children: [] } ],\n  },\n  {\n    id: '418',\n    parentId: null,\n    custom: 'ü',\n    children: [\n\t\t\t\t\t{ id: '1941', parentId: '418', custom: 'de', children: [] },\n\t\t\t\t\t{ id: '1', parentId: '418', custom: 'ZZZz', children: [] },\n    ],\n  },\n])\n  })\n\n  it('should treat objects with missing parentId as root objects', () => {\n    expect(arrayToTree([\n\t\t\t\t{ id: '4', custom: 'abc' },\n\t\t\t\t{ id: '31', parentId: '4', custom: '12' },\n\t\t\t\t{ id: '1941', parentId: '418', custom: 'de' },\n\t\t\t\t{ id: '1', parentId: '418', custom: 'ZZZz' },\n\t\t\t\t{ id: '418', custom: 'ü' },\n\t\t\t\t{ id: '1313', parentId: '13', custom: 'Not existing' },\n    ])).to.deep.equal([\n      {\n        data: { id: '4', custom: 'abc' },\n        children: [ { data: { id: '31', parentId: '4', custom: '12' }, children: [] } ],\n      },\n      {\n        data: { id: '418', custom: 'ü' },\n        children: [\n\t\t\t\t\t{ data: { id: '1941', parentId: '418', custom: 'de' }, children: [] },\n\t\t\t\t\t{ data: { id: '1', parentId: '418', custom: 'ZZZz' }, children: [] },\n        ],\n      },\n    ])\n  })\n\n  it('should treat objects with empty string as parentId as root objects', () => {\n    expect(arrayToTree([\n\t\t\t\t{ id: '4', parentId: '', custom: 'abc' },\n\t\t\t\t{ id: '31', parentId: '4', custom: '12' },\n\t\t\t\t{ id: '1941', parentId: '418', custom: 'de' },\n\t\t\t\t{ id: '1', parentId: '418', custom: 'ZZZz' },\n\t\t\t\t{ id: '418', parentId: '', custom: 'ü' },\n\t\t\t\t{ id: '1313', parentId: '13', custom: 'Not existing' },\n    ])).to.deep.equal([\n      {\n        data: { id: '4', parentId: '', custom: 'abc' },\n        children: [ { data: { id: '31', parentId: '4', custom: '12' }, children: [] } ],\n      },\n      {\n        data: { id: '418', parentId: '', custom: 'ü' },\n        children: [\n\t\t\t\t\t{ data: { id: '1941', parentId: '418', custom: 'de' }, children: [] },\n\t\t\t\t\t{ data: { id: '1', parentId: '418', custom: 'ZZZz' }, children: [] },\n        ],\n      },\n    ])\n  })\n\n  it('should treat objects with non-zero length string as parentId as root objects if these parent ids are in rootParentIds', () => {\n    expect(arrayToTree(\n      [\n        { id: '4', parentId: 'orphan1', custom: 'abc' },\n        { id: '31', parentId: '4', custom: '12' },\n        { id: '1941', parentId: '418', custom: 'de' },\n        { id: '1', parentId: '418', custom: 'ZZZz' },\n        { id: '418', parentId: 'orphan2', custom: 'ü' },\n        { id: '1313', parentId: 'orphan3', custom: 'will be ignored' },\n      ],\n      {\n        rootParentIds: { '': true, orphan1: true, orphan2: true },\n      },\n    )).to.deep.equal([\n      {\n        data: { id: '4', parentId: 'orphan1', custom: 'abc' }, children: [\n          { data: { id: '31', parentId: '4', custom: '12' }, children: [] },\n        ],\n      },\n      {\n        data: { id: '418', parentId: 'orphan2', custom: 'ü' }, children: [\n          { data: { id: '1941', parentId: '418', custom: 'de' }, children: [] },\n          { data: { id: '1', parentId: '418', custom: 'ZZZz' }, children: [] },\n        ],\n      },\n    ])\n  })\n\n  it('should not throw if orphans exist but throwIfOrphans is false', () => {\n    expect(arrayToTree([\n\t\t\t\t{ id: '4', parentId: null, custom: 'abc' },\n\t\t\t\t{ id: '31', parentId: '4', custom: '12' },\n\t\t\t\t{ id: '418', parentId: '6', custom: 'ü' },\n    ])).to.deep.equal([\n      {\n        data: { id: '4', parentId: null, custom: 'abc' },\n        children: [ { data: { id: '31', parentId: '4', custom: '12' }, children: [] } ],\n      },\n    ])\n  })\n\n  it('should throw if orphans exist and throwIfOrphans is true', () => {\n    expect(() =>\n\t\t\tarrayToTree(\n  [\n\t\t\t\t\t{ id: '4', parentId: null, custom: 'abc' },\n\t\t\t\t\t{ id: '31', parentId: '4', custom: '12' },\n\t\t\t\t\t{ id: '418', parentId: '6', custom: 'ü' },\n\t\t\t\t\t{ id: '419', parentId: '418', custom: 'ü' },\n\t\t\t\t\t{ id: '420', parentId: '7', custom: 'ü' },\n  ],\n\t\t\t\t{ throwIfOrphans: true },\n\t\t\t),\n\t\t).to.throw(\n\t\t\t'The items array contains orphans that point to the following parentIds: [6,7]. ' +\n\t\t\t\t'These parentIds do not exist in the items array. ' +\n\t\t\t\t'Hint: prevent orphans to result in an error by passing the following option: { throwIfOrphans: false }',\n\t\t)\n  })\n\n  it('should not throw if no orphans exist and throwIfOrphans is true, but the order is different (see #18)', () => {\n    expect(arrayToTree(\n      [\n\t\t\t\t\t{ id: '2', parentId: 'root', foo: 'bar' },\n\t\t\t\t\t{ id: '1-1', parentId: '1', foo: 'bar' },\n\t\t\t\t\t{ id: '1', parentId: 'root', foo: 'bar' },\n\t\t\t\t\t{ id: 'root', parentId: null, bar: 'bar' },\n      ],\n\t\t\t\t{ dataField: null, throwIfOrphans: true },\n\t\t\t),\n\t\t).to.deep.equal([\n  {\n    id: 'root',\n    parentId: null,\n    bar: 'bar',\n    children: [\n\t\t\t\t\t{ id: '2', parentId: 'root', foo: 'bar', children: [] },\n      {\n        id: '1',\n        parentId: 'root',\n        foo: 'bar',\n        children: [ { id: '1-1', parentId: '1', foo: 'bar', children: [] } ],\n      },\n    ],\n  },\n])\n  })\n\n  it('should throw if orphans exist and throwIfOrphans is true and rootParentIds don\\'t contain orphan parentId', () => {\n    expect(\n      () => arrayToTree(\n        [\n          { id: '4', parentId: null, custom: 'abc' },\n          { id: '31', parentId: '4', custom: '12' },\n          { id: '418', parentId: '6', custom: 'ü' },\n          { id: '419', parentId: '418', custom: 'ü' },\n          { id: '420', parentId: '7', custom: 'ü' },\n        ],\n        {\n          rootParentIds: { '': true, '6': true },\n          throwIfOrphans: true,\n        },\n      ),\n    ).to.throw(\n      'The items array contains orphans that point to the following parentIds: [7]. ' +\n      'These parentIds do not exist in the items array. ' +\n      'Hint: prevent orphans to result in an error by passing the following option: { throwIfOrphans: false }',\n    )\n  })\n\n  it('should throw if a node has parentId that both exists in another node and is in rootParentIds', () => {\n    expect(\n      () => arrayToTree(\n        [\n          { id: 'fakeOrphan', parentId: null },\n          { id: 'aaa', parentId: 'fakeOrphan' },\n          { id: 'bbb', parentId: 'aaa' },\n          { id: 'ccc', parentId: 'bbb' },\n        ],\n        {\n          rootParentIds: { '': true, 'fakeOrphan': true },\n          throwIfOrphans: true,\n        },\n      ),\n    ).to.throw(\n      'The item array contains a node whose parentId both exists in another node and is in `rootParentIds` ' +\n      '(`itemId`: \"fakeOrphan\", `rootParentIds`: \"\", \"fakeOrphan\").',\n    )\n  })\n\n  it('should replace default rootParentIds by the provided value', () => {\n    expect(\n      arrayToTree([\n        { id: '4', parentId: '', custom: 'abc' },\n        { id: '31', parentId: '4', custom: '12' },\n        { id: '418', parentId: '6', custom: 'ü' },\n      ], {\n        rootParentIds: { '6': true },\n      },\n    )).to.deep.equal([\n      { data: { id: '418', parentId: '6', custom: 'ü' }, children: [] },\n    ])\n  })\n\n  it('should work with empty inputs', () => {\n    expect(arrayToTree([])).to.deep.equal([])\n  })\n\n  it('should work with nested objects and nested id and parentId properties', () => {\n    expect(arrayToTree(\n      [\n\t\t\t\t\t{ nested: { id: '1', parentId: null, custom: '1' } },\n\t\t\t\t\t{ nested: { id: '1.1', parentId: '1', custom: '1.1' } },\n\t\t\t\t\t{ nested: { id: '1.1.1', parentId: '1.1', custom: '1.1.1' } },\n\t\t\t\t\t{ nested: { id: '1.2', parentId: '1', custom: '1.2' } },\n\t\t\t\t\t{ nested: { id: '2', parentId: null, custom: '2' } },\n      ],\n\t\t\t\t{ id: 'nested.id', parentId: 'nested.parentId' },\n\t\t\t),\n\t\t).to.deep.equal([\n  {\n    data: { nested: { id: '1', parentId: null, custom: '1' } },\n    children: [\n      {\n        data: { nested: { id: '1.1', parentId: '1', custom: '1.1' } },\n        children: [\n          {\n            data: { nested: { id: '1.1.1', parentId: '1.1', custom: '1.1.1' } },\n            children: [],\n          },\n        ],\n      },\n      {\n        data: { nested: { id: '1.2', parentId: '1', custom: '1.2' } },\n        children: [],\n      },\n    ],\n  },\n  {\n    data: { nested: { id: '2', parentId: null, custom: '2' } },\n    children: [],\n  },\n])\n\n  })\n  it('should work with nested id property', () => {\n    expect(arrayToTree(\n      [\n\t\t\t\t\t{ one: { id: '1' }, parentId: null, custom: '1' },\n\t\t\t\t\t{ one: { id: '1.1' }, parentId: '1', custom: '1.1' },\n      ],\n\t\t\t\t{ id: 'one.id', parentId: 'parentId' },\n\t\t\t),\n\t\t).to.deep.equal([{\n  data: { one: { id: '1' }, parentId: null, custom: '1' },\n  children: [\n    {\n      data: { one: { id: '1.1' }, parentId: '1', custom: '1.1' },\n      children: [],\n    },\n  ],\n}])\n  })\n  it('should work with nested parentId property', () => {\n    expect(arrayToTree(\n      [\n\t\t\t\t\t{ id: '1', two: { parentId: null }, custom: '1' },\n\t\t\t\t\t{ id: '1.1', two: { parentId: '1' }, custom: '1.1' },\n      ],\n\t\t\t\t{ id: 'id', parentId: 'two.parentId' },\n\t\t\t),\n\t\t).to.deep.equal([{\n  data: { id: '1', two: { parentId: null }, custom: '1' },\n  children: [\n    {\n      data: { id: '1.1', two: { parentId: '1' }, custom: '1.1' },\n      children: [],\n    },\n  ],\n}])\n  })\n  it('should work with nested id and parentId properties', () => {\n    expect(arrayToTree(\n      [\n\t\t\t\t\t{ one: { id: '1' }, two: { parentId: null }, custom: '1' },\n\t\t\t\t\t{ one: { id: '1.1' }, two: { parentId: '1' }, custom: '1.1' },\n      ],\n\t\t\t\t{ id: 'one.id', parentId: 'two.parentId' },\n\t\t\t),\n\t\t).to.deep.equal([{\n  data: { one: { id: '1' }, two: { parentId: null }, custom: '1' },\n  children: [\n    {\n      data: { one: { id: '1.1' }, two: { parentId: '1' }, custom: '1.1' },\n      children: [],\n    },\n  ],\n}])\n  })\n})\n"
      ]
    },
    "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    "hash": "22c9db6faeb9bb61048dbe8691fb68c1a619c650"
  },
  "/Users/philipstanislaus/Code/philipstanislaus/performant-array-to-tree/src/arrayToTree.ts": {
    "path": "/Users/philipstanislaus/Code/philipstanislaus/performant-array-to-tree/src/arrayToTree.ts",
    "statementMap": {
      "0": {
        "start": { "line": 2, "column": 15 },
        "end": { "line": 12, "column": 1 }
      },
      "1": {
        "start": { "line": 3, "column": 4 },
        "end": { "line": 10, "column": 6 }
      },
      "2": {
        "start": { "line": 4, "column": 8 },
        "end": { "line": 8, "column": 9 }
      },
      "3": {
        "start": { "line": 4, "column": 24 },
        "end": { "line": 4, "column": 25 }
      },
      "4": {
        "start": { "line": 4, "column": 31 },
        "end": { "line": 4, "column": 47 }
      },
      "5": {
        "start": { "line": 5, "column": 12 },
        "end": { "line": 5, "column": 29 }
      },
      "6": {
        "start": { "line": 6, "column": 12 },
        "end": { "line": 7, "column": 28 }
      },
      "7": {
        "start": { "line": 6, "column": 29 },
        "end": { "line": 7, "column": 28 }
      },
      "8": {
        "start": { "line": 7, "column": 16 },
        "end": { "line": 7, "column": 28 }
      },
      "9": {
        "start": { "line": 9, "column": 8 },
        "end": { "line": 9, "column": 17 }
      },
      "10": {
        "start": { "line": 11, "column": 4 },
        "end": { "line": 11, "column": 43 }
      },
      "11": {
        "start": { "line": 13, "column": 0 },
        "end": { "line": 13, "column": 62 }
      },
      "12": {
        "start": { "line": 14, "column": 0 },
        "end": { "line": 14, "column": 29 }
      },
      "13": {
        "start": { "line": 15, "column": 20 },
        "end": { "line": 22, "column": 1 }
      },
      "14": {
        "start": { "line": 28, "column": 4 },
        "end": { "line": 28, "column": 43 }
      },
      "15": {
        "start": { "line": 28, "column": 29 },
        "end": { "line": 28, "column": 41 }
      },
      "16": {
        "start": { "line": 29, "column": 15 },
        "end": { "line": 29, "column": 60 }
      },
      "17": {
        "start": { "line": 31, "column": 20 },
        "end": { "line": 31, "column": 22 }
      },
      "18": {
        "start": { "line": 33, "column": 17 },
        "end": { "line": 33, "column": 19 }
      },
      "19": {
        "start": { "line": 36, "column": 20 },
        "end": { "line": 36, "column": 60 }
      },
      "20": {
        "start": { "line": 41, "column": 4 },
        "end": { "line": 84, "column": 5 }
      },
      "21": {
        "start": { "line": 41, "column": 18 },
        "end": { "line": 41, "column": 19 }
      },
      "22": {
        "start": { "line": 41, "column": 31 },
        "end": { "line": 41, "column": 36 }
      },
      "23": {
        "start": { "line": 42, "column": 19 },
        "end": { "line": 42, "column": 30 }
      },
      "24": {
        "start": { "line": 43, "column": 21 },
        "end": { "line": 43, "column": 53 }
      },
      "25": {
        "start": { "line": 44, "column": 23 },
        "end": { "line": 44, "column": 61 }
      },
      "26": {
        "start": { "line": 45, "column": 8 },
        "end": { "line": 48, "column": 9 }
      },
      "27": {
        "start": { "line": 46, "column": 12 },
        "end": { "line": 47, "column": 184 }
      },
      "28": {
        "start": { "line": 47, "column": 137 },
        "end": { "line": 47, "column": 160 }
      },
      "29": {
        "start": { "line": 50, "column": 8 },
        "end": { "line": 53, "column": 9 }
      },
      "30": {
        "start": { "line": 52, "column": 12 },
        "end": { "line": 52, "column": 72 }
      },
      "31": {
        "start": { "line": 55, "column": 8 },
        "end": { "line": 57, "column": 9 }
      },
      "32": {
        "start": { "line": 56, "column": 12 },
        "end": { "line": 56, "column": 37 }
      },
      "33": {
        "start": { "line": 59, "column": 8 },
        "end": { "line": 64, "column": 9 }
      },
      "34": {
        "start": { "line": 60, "column": 12 },
        "end": { "line": 60, "column": 50 }
      },
      "35": {
        "start": { "line": 63, "column": 12 },
        "end": { "line": 63, "column": 134 }
      },
      "36": {
        "start": { "line": 65, "column": 23 },
        "end": { "line": 65, "column": 37 }
      },
      "37": {
        "start": { "line": 66, "column": 8 },
        "end": { "line": 83, "column": 9 }
      },
      "38": {
        "start": { "line": 68, "column": 12 },
        "end": { "line": 68, "column": 37 }
      },
      "39": {
        "start": { "line": 73, "column": 12 },
        "end": { "line": 80, "column": 13 }
      },
      "40": {
        "start": { "line": 75, "column": 16 },
        "end": { "line": 75, "column": 78 }
      },
      "41": {
        "start": { "line": 77, "column": 16 },
        "end": { "line": 79, "column": 17 }
      },
      "42": {
        "start": { "line": 78, "column": 20 },
        "end": { "line": 78, "column": 44 }
      },
      "43": {
        "start": { "line": 82, "column": 12 },
        "end": { "line": 82, "column": 64 }
      },
      "44": {
        "start": { "line": 85, "column": 4 },
        "end": { "line": 89, "column": 5 }
      },
      "45": {
        "start": { "line": 86, "column": 8 },
        "end": { "line": 88, "column": 86 }
      },
      "46": {
        "start": { "line": 90, "column": 4 },
        "end": { "line": 90, "column": 21 }
      },
      "47": {
        "start": { "line": 92, "column": 0 },
        "end": { "line": 92, "column": 34 }
      },
      "48": {
        "start": { "line": 101, "column": 4 },
        "end": { "line": 101, "column": 84 }
      },
      "49": {
        "start": { "line": 101, "column": 62 },
        "end": { "line": 101, "column": 74 }
      }
    },
    "fnMap": {
      "0": {
        "name": "(anonymous_0)",
        "decl": {
          "start": { "line": 2, "column": 42 },
          "end": { "line": 2, "column": 43 }
        },
        "loc": {
          "start": { "line": 2, "column": 54 },
          "end": { "line": 12, "column": 1 }
        },
        "line": 2
      },
      "1": {
        "name": "(anonymous_1)",
        "decl": {
          "start": { "line": 3, "column": 32 },
          "end": { "line": 3, "column": 33 }
        },
        "loc": {
          "start": { "line": 3, "column": 44 },
          "end": { "line": 10, "column": 5 }
        },
        "line": 3
      },
      "2": {
        "name": "arrayToTree",
        "decl": {
          "start": { "line": 26, "column": 9 },
          "end": { "line": 26, "column": 20 }
        },
        "loc": {
          "start": { "line": 26, "column": 36 },
          "end": { "line": 91, "column": 1 }
        },
        "line": 26
      },
      "3": {
        "name": "(anonymous_3)",
        "decl": {
          "start": { "line": 47, "column": 122 },
          "end": { "line": 47, "column": 123 }
        },
        "loc": {
          "start": { "line": 47, "column": 135 },
          "end": { "line": 47, "column": 162 }
        },
        "line": 47
      },
      "4": {
        "name": "getNestedProperty",
        "decl": {
          "start": { "line": 100, "column": 9 },
          "end": { "line": 100, "column": 26 }
        },
        "loc": {
          "start": { "line": 100, "column": 49 },
          "end": { "line": 102, "column": 1 }
        },
        "line": 100
      },
      "5": {
        "name": "(anonymous_5)",
        "decl": {
          "start": { "line": 101, "column": 44 },
          "end": { "line": 101, "column": 45 }
        },
        "loc": {
          "start": { "line": 101, "column": 60 },
          "end": { "line": 101, "column": 76 }
        },
        "line": 101
      }
    },
    "branchMap": {
      "0": {
        "loc": {
          "start": { "line": 2, "column": 15 },
          "end": { "line": 12, "column": 1 }
        },
        "type": "binary-expr",
        "locations": [
          {
            "start": { "line": 2, "column": 16 },
            "end": { "line": 2, "column": 20 }
          },
          {
            "start": { "line": 2, "column": 24 },
            "end": { "line": 2, "column": 37 }
          },
          {
            "start": { "line": 2, "column": 42 },
            "end": { "line": 12, "column": 1 }
          }
        ],
        "line": 2
      },
      "1": {
        "loc": {
          "start": { "line": 3, "column": 15 },
          "end": { "line": 10, "column": 5 }
        },
        "type": "binary-expr",
        "locations": [
          {
            "start": { "line": 3, "column": 15 },
            "end": { "line": 3, "column": 28 }
          },
          {
            "start": { "line": 3, "column": 32 },
            "end": { "line": 10, "column": 5 }
          }
        ],
        "line": 3
      },
      "2": {
        "loc": {
          "start": { "line": 6, "column": 29 },
          "end": { "line": 7, "column": 28 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 6, "column": 29 },
            "end": { "line": 7, "column": 28 }
          },
          {
            "start": { "line": 6, "column": 29 },
            "end": { "line": 7, "column": 28 }
          }
        ],
        "line": 6
      },
      "3": {
        "loc": {
          "start": { "line": 28, "column": 4 },
          "end": { "line": 28, "column": 43 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 28, "column": 4 },
            "end": { "line": 28, "column": 43 }
          },
          {
            "start": { "line": 28, "column": 4 },
            "end": { "line": 28, "column": 43 }
          }
        ],
        "line": 28
      },
      "4": {
        "loc": {
          "start": { "line": 36, "column": 20 },
          "end": { "line": 36, "column": 60 }
        },
        "type": "cond-expr",
        "locations": [
          {
            "start": { "line": 36, "column": 44 },
            "end": { "line": 36, "column": 53 }
          },
          {
            "start": { "line": 36, "column": 56 },
            "end": { "line": 36, "column": 60 }
          }
        ],
        "line": 36
      },
      "5": {
        "loc": {
          "start": { "line": 45, "column": 8 },
          "end": { "line": 48, "column": 9 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 45, "column": 8 },
            "end": { "line": 48, "column": 9 }
          },
          {
            "start": { "line": 45, "column": 8 },
            "end": { "line": 48, "column": 9 }
          }
        ],
        "line": 45
      },
      "6": {
        "loc": {
          "start": { "line": 50, "column": 8 },
          "end": { "line": 53, "column": 9 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 50, "column": 8 },
            "end": { "line": 53, "column": 9 }
          },
          {
            "start": { "line": 50, "column": 8 },
            "end": { "line": 53, "column": 9 }
          }
        ],
        "line": 50
      },
      "7": {
        "loc": {
          "start": { "line": 55, "column": 8 },
          "end": { "line": 57, "column": 9 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 55, "column": 8 },
            "end": { "line": 57, "column": 9 }
          },
          {
            "start": { "line": 55, "column": 8 },
            "end": { "line": 57, "column": 9 }
          }
        ],
        "line": 55
      },
      "8": {
        "loc": {
          "start": { "line": 59, "column": 8 },
          "end": { "line": 64, "column": 9 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 59, "column": 8 },
            "end": { "line": 64, "column": 9 }
          },
          {
            "start": { "line": 59, "column": 8 },
            "end": { "line": 64, "column": 9 }
          }
        ],
        "line": 59
      },
      "9": {
        "loc": {
          "start": { "line": 66, "column": 8 },
          "end": { "line": 83, "column": 9 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 66, "column": 8 },
            "end": { "line": 83, "column": 9 }
          },
          {
            "start": { "line": 66, "column": 8 },
            "end": { "line": 83, "column": 9 }
          }
        ],
        "line": 66
      },
      "10": {
        "loc": {
          "start": { "line": 66, "column": 12 },
          "end": { "line": 66, "column": 87 }
        },
        "type": "binary-expr",
        "locations": [
          {
            "start": { "line": 66, "column": 12 },
            "end": { "line": 66, "column": 29 }
          },
          {
            "start": { "line": 66, "column": 33 },
            "end": { "line": 66, "column": 55 }
          },
          {
            "start": { "line": 66, "column": 59 },
            "end": { "line": 66, "column": 87 }
          }
        ],
        "line": 66
      },
      "11": {
        "loc": {
          "start": { "line": 73, "column": 12 },
          "end": { "line": 80, "column": 13 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 73, "column": 12 },
            "end": { "line": 80, "column": 13 }
          },
          {
            "start": { "line": 73, "column": 12 },
            "end": { "line": 80, "column": 13 }
          }
        ],
        "line": 73
      },
      "12": {
        "loc": {
          "start": { "line": 77, "column": 16 },
          "end": { "line": 79, "column": 17 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 77, "column": 16 },
            "end": { "line": 79, "column": 17 }
          },
          {
            "start": { "line": 77, "column": 16 },
            "end": { "line": 79, "column": 17 }
          }
        ],
        "line": 77
      },
      "13": {
        "loc": {
          "start": { "line": 85, "column": 4 },
          "end": { "line": 89, "column": 5 }
        },
        "type": "if",
        "locations": [
          {
            "start": { "line": 85, "column": 4 },
            "end": { "line": 89, "column": 5 }
          },
          {
            "start": { "line": 85, "column": 4 },
            "end": { "line": 89, "column": 5 }
          }
        ],
        "line": 85
      },
      "14": {
        "loc": {
          "start": { "line": 85, "column": 8 },
          "end": { "line": 85, "column": 76 }
        },
        "type": "cond-expr",
        "locations": [
          {
            "start": { "line": 85, "column": 53 },
            "end": { "line": 85, "column": 59 }
          },
          {
            "start": { "line": 85, "column": 62 },
            "end": { "line": 85, "column": 76 }
          }
        ],
        "line": 85
      },
      "15": {
        "loc": {
          "start": { "line": 85, "column": 8 },
          "end": { "line": 85, "column": 50 }
        },
        "type": "binary-expr",
        "locations": [
          {
            "start": { "line": 85, "column": 8 },
            "end": { "line": 85, "column": 26 }
          },
          {
            "start": { "line": 85, "column": 30 },
            "end": { "line": 85, "column": 50 }
          }
        ],
        "line": 85
      }
    },
    "s": {
      "0": 1,
      "1": 2,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 2,
      "11": 1,
      "12": 1,
      "13": 1,
      "14": 21,
      "15": 7,
      "16": 21,
      "17": 21,
      "18": 21,
      "19": 21,
      "20": 21,
      "21": 21,
      "22": 21,
      "23": 87,
      "24": 87,
      "25": 87,
      "26": 87,
      "27": 1,
      "28": 2,
      "29": 86,
      "30": 74,
      "31": 86,
      "32": 14,
      "33": 86,
      "34": 66,
      "35": 20,
      "36": 86,
      "37": 86,
      "38": 31,
      "39": 55,
      "40": 22,
      "41": 22,
      "42": 5,
      "43": 55,
      "44": 20,
      "45": 2,
      "46": 18,
      "47": 1,
      "48": 174,
      "49": 192
    },
    "f": { "0": 2, "1": 0, "2": 21, "3": 2, "4": 174, "5": 192 },
    "b": {
      "0": [1, 1, 1],
      "1": [2, 0],
      "2": [0, 0],
      "3": [7, 14],
      "4": [4, 17],
      "5": [1, 86],
      "6": [74, 12],
      "7": [14, 72],
      "8": [66, 20],
      "9": [31, 55],
      "10": [86, 63, 61],
      "11": [22, 33],
      "12": [5, 17],
      "13": [2, 18],
      "14": [17, 3],
      "15": [20, 3]
    },
    "inputSourceMap": {
      "version": 3,
      "file": "/Users/philipstanislaus/Code/philipstanislaus/performant-array-to-tree/src/arrayToTree.ts",
      "sources": [
        "/Users/philipstanislaus/Code/philipstanislaus/performant-array-to-tree/src/arrayToTree.ts"
      ],
      "names": [],
      "mappings": "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",
      "sourcesContent": [
        "export interface Item {\n  id?: string | number\n  parentId?: string | number | null\n  [key: string]: any\n}\n\nexport interface TreeItem {\n  id?: string | number\n  parentId?: string | number | null\n  [key: string]: Item | TreeItem[] | any\n}\n\nexport interface Config {\n  id: string,\n  parentId: string,\n  dataField: string | null,\n  childrenField: string,\n  throwIfOrphans: boolean,\n  rootParentIds: { [rootParentId: string]: true }, // use an object here for fast lookups\n}\n\nconst defaultConfig: Config = {\n  id: 'id',\n  parentId: 'parentId',\n  dataField: 'data',\n  childrenField: 'children',\n  throwIfOrphans: false,\n  rootParentIds: { '': true },\n}\n\n/**\n * Unflattens an array to a tree with runtime O(n)\n */\nexport function arrayToTree (items: Item[], config: Partial<Config> = {}): TreeItem[] {\n  const conf: Config = { ...defaultConfig, ...config }\n\n\t// the resulting unflattened tree\n  const rootItems: TreeItem[] = []\n\n\t// stores all already processed items with their ids as key so we can easily look them up\n  const lookup: { [id: string]: TreeItem } = {}\n\n\t// stores all item ids that have not been added to the resulting unflattened tree yet\n\t// this is an opt-in property, since it has a slight runtime overhead\n  const orphanIds: null | Set<string | number> = config.throwIfOrphans ? new Set() : null\n\n\t// idea of this loop:\n\t// whenever an item has a parent, but the parent is not yet in the lookup object, we store a preliminary parent\n\t// in the lookup object and fill it with the data of the parent later\n\t// if an item has no parentId, add it as a root element to rootItems\n  for (const item of items) {\n    const itemId = getNestedProperty(item, conf.id)\n    const parentId = getNestedProperty(item, conf.parentId)\n\n    if (conf.rootParentIds[itemId]) {\n      throw new Error(`The item array contains a node whose parentId both exists in another node and is in ` +\n      `\\`rootParentIds\\` (\\`itemId\\`: \"${itemId}\", \\`rootParentIds\\`: ${\n        Object.keys(conf.rootParentIds).map(r => `\"${r}\"`).join(', ')}).`)\n    }\n\n    // look whether item already exists in the lookup table\n    if (!Object.prototype.hasOwnProperty.call(lookup, itemId)) {\n\t\t\t// item is not yet there, so add a preliminary item (its data will be added later)\n      lookup[itemId] = { [conf.childrenField]: [] }\n    }\n\n\t\t// if we track orphans, delete this item from the orphan set if it is in it\n    if (orphanIds) {\n      orphanIds.delete(itemId)\n    }\n\n\t\t// add the current item's data to the item in the lookup table\n    if (conf.dataField) {\n      lookup[itemId][conf.dataField] = item\n    } else {\n      lookup[itemId] = { ...item, [conf.childrenField]: lookup[itemId][conf.childrenField] }\n    }\n\n    const TreeItem = lookup[itemId]\n\n    if (parentId === null || parentId === undefined || conf.rootParentIds[parentId]) {\n      // is a root item\n      rootItems.push(TreeItem)\n    } else {\n\t\t\t// has a parent\n\n\t\t\t// look whether the parent already exists in the lookup table\n      if (!Object.prototype.hasOwnProperty.call(lookup, parentId)) {\n\t\t\t\t// parent is not yet there, so add a preliminary parent (its data will be added later)\n        lookup[parentId] = { [conf.childrenField]: [] }\n\n\t\t\t\t// if we track orphans, add the generated parent to the orphan list\n        if (orphanIds) {\n          orphanIds.add(parentId)\n        }\n      }\n\n\t\t\t// add the current item to the parent\n      lookup[parentId][conf.childrenField].push(TreeItem)\n    }\n  }\n\n  if (orphanIds?.size) {\n    throw new Error(\n\t\t\t`The items array contains orphans that point to the following parentIds: ` +\n\t\t\t\t`[${Array.from(\n\t\t\t\t\torphanIds,\n\t\t\t\t)}]. These parentIds do not exist in the items array. Hint: prevent orphans to result ` +\n\t\t\t\t`in an error by passing the following option: { throwIfOrphans: false }`,\n\t\t)\n  }\n\n  return rootItems\n}\n\n/**\n * Returns the value of a nested property inside an item\n * Example: user can access 'id', or 'parentId' inside item = { nestedObject: { id: 'myId', parentId: 'myParentId' } }\n * using getNestedItemProperty(item, 'nestedObject.id') or getNestedItemProperty(item, 'nestedObject.parentId')\n * @param item\n * @param nestedProperty the chained properties to access the nested property. Eg: 'your.nested.property'\n */\nfunction getNestedProperty (item: Item, nestedProperty: string) {\n  return nestedProperty.split('.').reduce((o, i) => o[i], item)\n}\n"
      ]
    },
    "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    "hash": "4f78e75629bfd993686eb564fd7a3495c5540f54"
  }
}
